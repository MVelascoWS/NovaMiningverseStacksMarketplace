{"ast":null,"code":"import { InvalidStateError } from '@stacks/common';\nconst SESSION_VERSION = '1.0.0';\nexport class SessionData {\n  constructor(options) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n\n  static fromJSON(json) {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n\n    const options = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags\n    };\n    return new SessionData(options);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AAGA,MAAMC,eAAe,GAAG,OAAxB;AAkBA,OAAM,MAAOC,WAAP,CAAkB;EAWtBC,YAAYC,OAAZ,EAAmC;IACjC,KAAKC,OAAL,GAAeJ,eAAf;IACA,KAAKK,QAAL,GAAgBF,OAAO,CAACE,QAAxB;IACA,KAAKC,UAAL,GAAkBH,OAAO,CAACG,UAA1B;IACA,KAAKC,KAAL,GAAaJ,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACI,KAAxB,GAAgC,EAA7C;EACD;;EAUc,OAARC,QAAQ,CAACC,IAAD,EAAU;IACvB,IAAIA,IAAI,CAACL,OAAL,KAAiBJ,eAArB,EAAsC;MACpC,MAAM,IAAID,iBAAJ,CAAsB,qBAAqBU,IAAI,CAACL,OAAO,+BAAvD,CAAN;IACD;;IACD,MAAMD,OAAO,GAAmB;MAC9BO,QAAQ,EAAED,IAAI,CAACC,QADe;MAE9BL,QAAQ,EAAEI,IAAI,CAACJ,QAFe;MAG9BC,UAAU,EAAEG,IAAI,CAACH,UAHa;MAI9BC,KAAK,EAAEE,IAAI,CAACF;IAJkB,CAAhC;IAMA,OAAO,IAAIN,WAAJ,CAAgBE,OAAhB,CAAP;EACD;;EAEDQ,QAAQ;IACN,OAAOC,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP;EACD;;AAzCqB","names":["InvalidStateError","SESSION_VERSION","SessionData","constructor","options","version","userData","transitKey","etags","fromJSON","json","coreNode","toString","JSON","stringify"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\auth\\src\\sessionData.ts"],"sourcesContent":["import { InvalidStateError } from '@stacks/common';\nimport { UserData } from './userData';\n\nconst SESSION_VERSION = '1.0.0';\n\ntype EtagMap = { [key: string]: string };\n\nexport interface SessionOptions {\n  coreNode?: string;\n  userData?: UserData;\n  transitKey?: string;\n  etags?: EtagMap;\n  localStorageKey?: string;\n  storeOptions?: {\n    localStorageKey?: string;\n  };\n}\n\n/**\n * @ignore\n */\nexport class SessionData {\n  version: string;\n\n  transitKey?: string;\n\n  // using this in place of\n  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))\n  userData?: UserData;\n\n  etags?: EtagMap;\n\n  constructor(options: SessionOptions) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n\n  // getGaiaHubConfig(): GaiaHubConfig {\n  //   return this.userData && this.userData.gaiaHubConfig\n  // }\n\n  // setGaiaHubConfig(config: GaiaHubConfig): void {\n  //   this.userData.gaiaHubConfig = config\n  // }\n\n  static fromJSON(json: any): SessionData {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n    const options: SessionOptions = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags,\n    };\n    return new SessionData(options);\n  }\n\n  toString(): string {\n    return JSON.stringify(this);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}