{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport class NodeCryptoHmacSha256 {\n  constructor(createHmac) {\n    this.createHmac = createHmac;\n  }\n\n  async digest(key, data) {\n    const result = this.createHmac('sha256', key).update(data).digest();\n    return Promise.resolve(result);\n  }\n\n}\nexport class WebCryptoHmacSha256 {\n  constructor(subtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async digest(key, data) {\n    const cryptoKey = await this.subtleCrypto.importKey('raw', key, {\n      name: 'HMAC',\n      hash: 'SHA-256'\n    }, true, ['sign']);\n    const sig = await this.subtleCrypto.sign({\n      name: 'HMAC',\n      hash: 'SHA-256'\n    }, cryptoKey, data);\n    return Buffer.from(sig);\n  }\n\n}\nexport async function createHmacSha256() {\n  const cryptoLib = await getCryptoLib();\n\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoHmacSha256(cryptoLib.lib);\n  } else {\n    return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAQA,OAAM,MAAOC,oBAAP,CAA2B;EAG/BC,YAAYC,UAAZ,EAA4C;IAC1C,KAAKA,UAAL,GAAkBA,UAAlB;EACD;;EAEW,MAANC,MAAM,CAACC,GAAD,EAAcC,IAAd,EAA0B;IACpC,MAAMC,MAAM,GAAG,KAAKJ,UAAL,CAAgB,QAAhB,EAA0BE,GAA1B,EAA+BG,MAA/B,CAAsCF,IAAtC,EAA4CF,MAA5C,EAAf;IACA,OAAOK,OAAO,CAACC,OAAR,CAAgBH,MAAhB,CAAP;EACD;;AAV8B;AAajC,OAAM,MAAOI,mBAAP,CAA0B;EAG9BT,YAAYU,YAAZ,EAAsC;IACpC,KAAKA,YAAL,GAAoBA,YAApB;EACD;;EAEW,MAANR,MAAM,CAACC,GAAD,EAAcC,IAAd,EAA0B;IACpC,MAAMO,SAAS,GAAG,MAAM,KAAKD,YAAL,CAAkBE,SAAlB,CACtB,KADsB,EAEtBT,GAFsB,EAGtB;MAAEU,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE;IAAtB,CAHsB,EAItB,IAJsB,EAKtB,CAAC,MAAD,CALsB,CAAxB;IAOA,MAAMC,GAAG,GAAG,MAAM,KAAKL,YAAL,CAAkBM,IAAlB,CAEhB;MAAEH,IAAI,EAAE,MAAR;MAAgBC,IAAI,EAAE;IAAtB,CAFgB,EAGhBH,SAHgB,EAIhBP,IAJgB,CAAlB;IAMA,OAAOP,MAAM,CAACoB,IAAP,CAAYF,GAAZ,CAAP;EACD;;AAtB6B;AAyBhC,OAAO,eAAeG,gBAAf,GAA+B;EACpC,MAAMC,SAAS,GAAG,MAAMrB,YAAY,EAApC;;EACA,IAAIqB,SAAS,CAACN,IAAV,KAAmB,cAAvB,EAAuC;IACrC,OAAO,IAAIJ,mBAAJ,CAAwBU,SAAS,CAACC,GAAlC,CAAP;EACD,CAFD,MAEO;IACL,OAAO,IAAIrB,oBAAJ,CAAyBoB,SAAS,CAACC,GAAV,CAAcnB,UAAvC,CAAP;EACD;AACF","names":["Buffer","getCryptoLib","NodeCryptoHmacSha256","constructor","createHmac","digest","key","data","result","update","Promise","resolve","WebCryptoHmacSha256","subtleCrypto","cryptoKey","importKey","name","hash","sig","sign","from","createHmacSha256","cryptoLib","lib"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\encryption\\src\\hmacSha256.ts"],"sourcesContent":["import { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\n\nexport interface Hmac {\n  digest(key: Buffer, data: Buffer): Promise<Buffer>;\n}\n\ntype NodeCryptoCreateHmac = typeof import('crypto').createHmac;\n\nexport class NodeCryptoHmacSha256 implements Hmac {\n  createHmac: NodeCryptoCreateHmac;\n\n  constructor(createHmac: NodeCryptoCreateHmac) {\n    this.createHmac = createHmac;\n  }\n\n  async digest(key: Buffer, data: Buffer): Promise<Buffer> {\n    const result = this.createHmac('sha256', key).update(data).digest();\n    return Promise.resolve(result);\n  }\n}\n\nexport class WebCryptoHmacSha256 implements Hmac {\n  subtleCrypto: SubtleCrypto;\n\n  constructor(subtleCrypto: SubtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async digest(key: Buffer, data: Buffer): Promise<Buffer> {\n    const cryptoKey = await this.subtleCrypto.importKey(\n      'raw',\n      key,\n      { name: 'HMAC', hash: 'SHA-256' },\n      true,\n      ['sign']\n    );\n    const sig = await this.subtleCrypto.sign(\n      // The `hash` is only specified for non-compliant browsers like Edge.\n      { name: 'HMAC', hash: 'SHA-256' },\n      cryptoKey,\n      data\n    );\n    return Buffer.from(sig);\n  }\n}\n\nexport async function createHmacSha256(): Promise<Hmac> {\n  const cryptoLib = await getCryptoLib();\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoHmacSha256(cryptoLib.lib);\n  } else {\n    return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}