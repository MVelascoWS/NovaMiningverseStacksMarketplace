{"ast":null,"code":"import { config } from './config';\nconst levels = ['debug', 'info', 'warn', 'error', 'none'];\nconst levelToInt = {};\nconst intToLevel = {};\n\nfor (let index = 0; index < levels.length; index++) {\n  const level = levels[index];\n  levelToInt[level] = index;\n  intToLevel[index] = level;\n}\n\nexport class Logger {\n  static error(message) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  }\n\n  static warn(message) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  }\n\n  static info(message) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  }\n\n  static debug(message) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  }\n\n  static logMessage(level, message) {\n    return `[${level.toUpperCase()}] ${message}`;\n  }\n\n  static shouldLog(level) {\n    const currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,MAAMC,MAAM,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,MAAnC,CAAf;AAEA,MAAMC,UAAU,GAAgC,EAAhD;AACA,MAAMC,UAAU,GAA8B,EAA9C;;AAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,MAAM,CAACI,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;EAClD,MAAME,KAAK,GAAGL,MAAM,CAACG,KAAD,CAApB;EACAF,UAAU,CAACI,KAAD,CAAV,GAAoBF,KAApB;EACAD,UAAU,CAACC,KAAD,CAAV,GAAoBE,KAApB;AACD;;AAKD,OAAM,MAAOC,MAAP,CAAa;EACL,OAALC,KAAK,CAACC,OAAD,EAAgB;IAC1B,IAAI,CAAC,KAAKC,SAAL,CAAe,OAAf,CAAL,EAA8B;IAC9BC,OAAO,CAACH,KAAR,CAAc,KAAKI,UAAL,CAAgB,OAAhB,EAAyBH,OAAzB,CAAd;EACD;;EAEU,OAAJI,IAAI,CAACJ,OAAD,EAAgB;IACzB,IAAI,CAAC,KAAKC,SAAL,CAAe,MAAf,CAAL,EAA6B;IAC7BC,OAAO,CAACE,IAAR,CAAa,KAAKD,UAAL,CAAgB,MAAhB,EAAwBH,OAAxB,CAAb;EACD;;EAEU,OAAJK,IAAI,CAACL,OAAD,EAAgB;IACzB,IAAI,CAAC,KAAKC,SAAL,CAAe,MAAf,CAAL,EAA6B;IAC7BC,OAAO,CAACI,GAAR,CAAY,KAAKH,UAAL,CAAgB,MAAhB,EAAwBH,OAAxB,CAAZ;EACD;;EAEW,OAALO,KAAK,CAACP,OAAD,EAAgB;IAC1B,IAAI,CAAC,KAAKC,SAAL,CAAe,OAAf,CAAL,EAA8B;IAC9BC,OAAO,CAACI,GAAR,CAAY,KAAKH,UAAL,CAAgB,OAAhB,EAAyBH,OAAzB,CAAZ;EACD;;EAEgB,OAAVG,UAAU,CAACN,KAAD,EAAgBG,OAAhB,EAA+B;IAC9C,OAAO,IAAIH,KAAK,CAACW,WAAN,EAAmB,KAAKR,OAAO,EAA1C;EACD;;EAEe,OAATC,SAAS,CAACJ,KAAD,EAAc;IAC5B,MAAMY,YAAY,GAAGhB,UAAU,CAACF,MAAM,CAACmB,QAAR,CAA/B;IACA,OAAOD,YAAY,IAAIhB,UAAU,CAACI,KAAD,CAAjC;EACD;;AA5BgB","names":["config","levels","levelToInt","intToLevel","index","length","level","Logger","error","message","shouldLog","console","logMessage","warn","info","log","debug","toUpperCase","currentLevel","logLevel"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\common\\src\\logger.ts"],"sourcesContent":["import { config } from './config';\n\nconst levels = ['debug', 'info', 'warn', 'error', 'none'];\n\nconst levelToInt: { [level: string]: number } = {};\nconst intToLevel: { [int: number]: string } = {};\n\nfor (let index = 0; index < levels.length; index++) {\n  const level = levels[index];\n  levelToInt[level] = index;\n  intToLevel[index] = level;\n}\n\n/**\n * @ignore\n */\nexport class Logger {\n  static error(message: string) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  }\n\n  static warn(message: string) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  }\n\n  static info(message: string) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  }\n\n  static debug(message: string) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  }\n\n  static logMessage(level: string, message: string) {\n    return `[${level.toUpperCase()}] ${message}`;\n  }\n\n  static shouldLog(level: string) {\n    const currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}