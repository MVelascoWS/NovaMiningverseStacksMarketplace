{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { createAddress, createLPString } from '../../postcondition-types';\nimport { addressToString } from '../../common';\nimport { ClarityType } from '../constants';\n\nfunction principalToString(principal) {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal) {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\nfunction standardPrincipalCV(addressString) {\n  const addr = createAddress(addressString);\n  return {\n    type: ClarityType.PrincipalStandard,\n    address: addr\n  };\n}\n\nfunction standardPrincipalCVFromAddress(address) {\n  return {\n    type: ClarityType.PrincipalStandard,\n    address\n  };\n}\n\nfunction contractPrincipalCV(addressString, contractName) {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\nfunction contractPrincipalCVFromAddress(address, contractName) {\n  if (Buffer.byteLength(contractName.content) >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n\n  return {\n    type: ClarityType.PrincipalContract,\n    address,\n    contractName\n  };\n}\n\nfunction contractPrincipalCVFromStandard(sp, contractName) {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName\n  };\n}\n\nexport { principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress, contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard };","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAA+BC,aAA/B,EAA8CC,cAA9C,QAAoE,2BAApE;AACA,SAAkBC,eAAlB,QAAyC,cAAzC;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAeA,SAASC,iBAAT,CAA2BC,SAA3B,EAAiD;EAC/C,IAAIA,SAAS,CAACC,IAAV,KAAmBH,WAAW,CAACI,iBAAnC,EAAsD;IACpD,OAAOL,eAAe,CAACG,SAAS,CAACG,OAAX,CAAtB;EACD,CAFD,MAEO,IAAIH,SAAS,CAACC,IAAV,KAAmBH,WAAW,CAACM,iBAAnC,EAAsD;IAC3D,MAAMD,OAAO,GAAGN,eAAe,CAACG,SAAS,CAACG,OAAX,CAA/B;IACA,OAAO,GAAGA,OAAO,IAAIH,SAAS,CAACK,YAAV,CAAuBC,OAAO,EAAnD;EACD,CAHM,MAGA;IACL,MAAM,IAAIC,KAAJ,CAAU,8BAA8BC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAAyB,EAAjE,CAAN;EACD;AACF;;AAED,SAASU,WAAT,CAAqBV,SAArB,EAAsC;EACpC,IAAIA,SAAS,CAACW,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;IAC3B,MAAM,CAACR,OAAD,EAAUE,YAAV,IAA0BL,SAAS,CAACY,KAAV,CAAgB,GAAhB,CAAhC;IACA,OAAOC,mBAAmB,CAACV,OAAD,EAAUE,YAAV,CAA1B;EACD,CAHD,MAGO;IACL,OAAOS,mBAAmB,CAACd,SAAD,CAA1B;EACD;AACF;;AAoBD,SAASc,mBAAT,CAA6BC,aAA7B,EAAkD;EAChD,MAAMC,IAAI,GAAGrB,aAAa,CAACoB,aAAD,CAA1B;EACA,OAAO;IAAEd,IAAI,EAAEH,WAAW,CAACI,iBAApB;IAAuCC,OAAO,EAAEa;EAAhD,CAAP;AACD;;AA0BD,SAASC,8BAAT,CAAwCd,OAAxC,EAAwD;EACtD,OAAO;IAAEF,IAAI,EAAEH,WAAW,CAACI,iBAApB;IAAuCC;EAAvC,CAAP;AACD;;AAsBD,SAASU,mBAAT,CAA6BE,aAA7B,EAAoDV,YAApD,EAAwE;EACtE,MAAMW,IAAI,GAAGrB,aAAa,CAACoB,aAAD,CAA1B;EACA,MAAMG,0BAA0B,GAAGtB,cAAc,CAACS,YAAD,CAAjD;EACA,OAAOc,8BAA8B,CAACH,IAAD,EAAOE,0BAAP,CAArC;AACD;;AAuBD,SAASC,8BAAT,CACEhB,OADF,EAEEE,YAFF,EAEoC;EAElC,IAAIX,MAAM,CAAC0B,UAAP,CAAkBf,YAAY,CAACC,OAA/B,KAA2C,GAA/C,EAAoD;IAClD,MAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;EACD;;EACD,OAAO;IAAEN,IAAI,EAAEH,WAAW,CAACM,iBAApB;IAAuCD,OAAvC;IAAgDE;EAAhD,CAAP;AACD;;AAED,SAASgB,+BAAT,CACEC,EADF,EAEEjB,YAFF,EAEsB;EAEpB,MAAMa,0BAA0B,GAAGtB,cAAc,CAACS,YAAD,CAAjD;EACA,OAAO;IACLJ,IAAI,EAAEH,WAAW,CAACM,iBADb;IAELD,OAAO,EAAEmB,EAAE,CAACnB,OAFP;IAGLE,YAAY,EAAEa;EAHT,CAAP;AAKD;;AAED,SAIER,WAJF,EAKEX,iBALF,EAMEe,mBANF,EAOEG,8BAPF,EAQEJ,mBARF,EASEM,8BATF,EAUEE,+BAVF","names":["Buffer","createAddress","createLPString","addressToString","ClarityType","principalToString","principal","type","PrincipalStandard","address","PrincipalContract","contractName","content","Error","JSON","stringify","principalCV","includes","split","contractPrincipalCV","standardPrincipalCV","addressString","addr","standardPrincipalCVFromAddress","lengthPrefixedContractName","contractPrincipalCVFromAddress","byteLength","contractPrincipalCVFromStandard","sp"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\principalCV.ts"],"sourcesContent":["import { Buffer } from '@stacks/common';\nimport { LengthPrefixedString, createAddress, createLPString } from '../../postcondition-types';\nimport { Address, addressToString } from '../../common';\nimport { ClarityType } from '../constants';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n *\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n *\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n *\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n\n * @param {contractName} string containing contract name\n *\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n *\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n *\n * @param {contractName} contract name of type LengthPrefixedString\n *\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (Buffer.byteLength(contractName.content) >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n"]},"metadata":{},"sourceType":"module"}