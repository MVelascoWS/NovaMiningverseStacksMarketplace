{"ast":null,"code":"import { SessionData } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\nexport class SessionDataStore {\n  constructor(sessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData() {\n    throw new Error('Abstract class');\n  }\n\n  setSessionData(_session) {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData() {\n    throw new Error('Abstract class');\n  }\n\n}\nexport class InstanceDataStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (!this.sessionData) {\n      this.setSessionData(new SessionData({}));\n    }\n  }\n\n  getSessionData() {\n    if (!this.sessionData) {\n      throw new NoSessionDataError('No session data was found.');\n    }\n\n    return this.sessionData;\n  }\n\n  setSessionData(session) {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData() {\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n\n}\nexport class LocalStorageStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      const sessionData = new SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData() {\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      throw new NoSessionDataError('No session data was found in localStorage');\n    }\n\n    const dataJSON = JSON.parse(data);\n    return SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session) {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData() {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4C,eAA5C;AACA,SAASC,wBAAT,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AAMA,OAAM,MAAOC,gBAAP,CAAuB;EAC3BC,YAAYC,cAAZ,EAA2C;IACzC,IAAIA,cAAJ,EAAoB;MAClB,MAAMC,cAAc,GAAG,IAAIN,WAAJ,CAAgBK,cAAhB,CAAvB;MACA,KAAKE,cAAL,CAAoBD,cAApB;IACD;EACF;;EAEDE,cAAc;IACZ,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;EACD;;EAGDF,cAAc,CAACG,QAAD,EAAsB;IAClC,MAAM,IAAID,KAAJ,CAAU,gBAAV,CAAN;EACD;;EAEDE,iBAAiB;IACf,MAAM,IAAIF,KAAJ,CAAU,gBAAV,CAAN;EACD;;AAnB0B;AA0B7B,OAAM,MAAOG,iBAAP,SAAiCT,gBAAjC,CAAiD;EAGrDC,YAAYC,cAAZ,EAA2C;IACzC,MAAMA,cAAN;;IACA,IAAI,CAAC,KAAKQ,WAAV,EAAuB;MACrB,KAAKN,cAAL,CAAoB,IAAIP,WAAJ,CAAgB,EAAhB,CAApB;IACD;EACF;;EAEDQ,cAAc;IACZ,IAAI,CAAC,KAAKK,WAAV,EAAuB;MACrB,MAAM,IAAIX,kBAAJ,CAAuB,4BAAvB,CAAN;IACD;;IACD,OAAO,KAAKW,WAAZ;EACD;;EAEDN,cAAc,CAACO,OAAD,EAAqB;IACjC,KAAKD,WAAL,GAAmBC,OAAnB;IACA,OAAO,IAAP;EACD;;EAEDH,iBAAiB;IACf,KAAKJ,cAAL,CAAoB,IAAIP,WAAJ,CAAgB,EAAhB,CAApB;IACA,OAAO,IAAP;EACD;;AAzBoD;AAgCvD,OAAM,MAAOe,iBAAP,SAAiCZ,gBAAjC,CAAiD;EAGrDC,YAAYC,cAAZ,EAA2C;IACzC,MAAMA,cAAN;;IACA,IACEA,cAAc,IACdA,cAAc,CAACW,YADf,IAEAX,cAAc,CAACW,YAAf,CAA4BC,eAF5B,IAGA,OAAOZ,cAAc,CAACW,YAAf,CAA4BC,eAAnC,KAAuD,QAJzD,EAKE;MACA,KAAKC,GAAL,GAAWb,cAAc,CAACW,YAAf,CAA4BC,eAAvC;IACD,CAPD,MAOO;MACL,KAAKC,GAAL,GAAWjB,wBAAX;IACD;;IAED,MAAMkB,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAAKH,GAA1B,CAAb;;IACA,IAAI,CAACC,IAAL,EAAW;MACT,MAAMN,WAAW,GAAG,IAAIb,WAAJ,CAAgB,EAAhB,CAApB;MACA,KAAKO,cAAL,CAAoBM,WAApB;IACD;EACF;;EAEDL,cAAc;IACZ,MAAMW,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAAKH,GAA1B,CAAb;;IACA,IAAI,CAACC,IAAL,EAAW;MACT,MAAM,IAAIjB,kBAAJ,CAAuB,2CAAvB,CAAN;IACD;;IACD,MAAMoB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAjB;IACA,OAAOnB,WAAW,CAACyB,QAAZ,CAAqBH,QAArB,CAAP;EACD;;EAEDf,cAAc,CAACO,OAAD,EAAqB;IACjCM,YAAY,CAACM,OAAb,CAAqB,KAAKR,GAA1B,EAA+BJ,OAAO,CAACa,QAAR,EAA/B;IACA,OAAO,IAAP;EACD;;EAEDhB,iBAAiB;IACfS,YAAY,CAACQ,UAAb,CAAwB,KAAKV,GAA7B;IACA,KAAKX,cAAL,CAAoB,IAAIP,WAAJ,CAAgB,EAAhB,CAApB;IACA,OAAO,IAAP;EACD;;AAzCoD","names":["SessionData","LOCALSTORAGE_SESSION_KEY","NoSessionDataError","SessionDataStore","constructor","sessionOptions","newSessionData","setSessionData","getSessionData","Error","_session","deleteSessionData","InstanceDataStore","sessionData","session","LocalStorageStore","storeOptions","localStorageKey","key","data","localStorage","getItem","dataJSON","JSON","parse","fromJSON","setItem","toString","removeItem"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\auth\\src\\sessionStore.ts"],"sourcesContent":["import { SessionData, SessionOptions } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\n\n/**\n * An abstract class representing the SessionDataStore interface.\n\n */\nexport class SessionDataStore {\n  constructor(sessionOptions?: SessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData(): SessionData {\n    throw new Error('Abstract class');\n  }\n\n  // TODO: fix, not used?\n  setSessionData(_session: SessionData): boolean {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData(): boolean {\n    throw new Error('Abstract class');\n  }\n}\n\n/**\n * Stores session data in the instance of this class.\n * @ignore\n */\nexport class InstanceDataStore extends SessionDataStore {\n  sessionData?: SessionData;\n\n  constructor(sessionOptions?: SessionOptions) {\n    super(sessionOptions);\n    if (!this.sessionData) {\n      this.setSessionData(new SessionData({}));\n    }\n  }\n\n  getSessionData(): SessionData {\n    if (!this.sessionData) {\n      throw new NoSessionDataError('No session data was found.');\n    }\n    return this.sessionData;\n  }\n\n  setSessionData(session: SessionData): boolean {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData(): boolean {\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}\n\n/**\n * Stores session data in browser a localStorage entry.\n * @ignore\n */\nexport class LocalStorageStore extends SessionDataStore {\n  key: string;\n\n  constructor(sessionOptions?: SessionOptions) {\n    super(sessionOptions);\n    if (\n      sessionOptions &&\n      sessionOptions.storeOptions &&\n      sessionOptions.storeOptions.localStorageKey &&\n      typeof sessionOptions.storeOptions.localStorageKey === 'string'\n    ) {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      const sessionData = new SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData(): SessionData {\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      throw new NoSessionDataError('No session data was found in localStorage');\n    }\n    const dataJSON = JSON.parse(data);\n    return SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session: SessionData): boolean {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData(): boolean {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}