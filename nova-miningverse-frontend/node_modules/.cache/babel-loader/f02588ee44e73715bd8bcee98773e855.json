{"ast":null,"code":"const NAMESPACE = 'connect-ui';\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n\nconst createTime = function (fnName) {\n  let tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  let style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n\n  if (flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n  }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = function (nodeName, vnodeData) {\n  let child = null;\n  let simple = false;\n  let lastSimple = false;\n  let vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  walk(children);\n\n  if (vnodeData) {\n    {\n      const classData = vnodeData.className || vnodeData.class;\n\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            let n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst parseClassListRegex = /\\s/;\n\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  let newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$); // add css classes, attrs, props, listeners, etc.\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n\n  return elm;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$; // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    return true;\n  }\n\n  return false;\n};\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const text = newVNode.$text$;\n\n  if (text === null) {\n    // element node\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      } // add the new vnode children\n\n\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    callRender(hostRef, instance);\n  }\n\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n\n  endRender();\n  endUpdate();\n  {\n    const childrenPromises = elm['s-p'];\n\n    const postUpdate = () => postUpdateComponent(hostRef);\n\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4\n      /* isWaitingForChildren */\n      ;\n      childrenPromises.length = 0;\n    }\n  }\n};\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\n\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    // redundant return here for better minification\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal); // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(_ref => {\n      let [memberName, [memberFlags]] = _ref;\n\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((hostRef.$flags$ & 32\n  /* hasInitializedComponent */\n  ) === 0) {\n    {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32\n      /* hasInitializedComponent */\n      ; // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n\n      Cstr = loadModule(cmpMeta);\n\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime();\n        Cstr = await Cstr;\n        endLoad();\n      }\n\n      if (!Cstr.isProxied) {\n        proxyComponent(Cstr, cmpMeta, 2\n        /* proxyState */\n        );\n        Cstr.isProxied = true;\n      }\n\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n\n      {\n        hostRef.$flags$ |= 8\n        /* isConstructingInstance */\n        ;\n      } // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n\n      {\n        hostRef.$flags$ &= ~8\n        /* isConstructingInstance */\n        ;\n      }\n      endNewInstance();\n    }\n\n    if (Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      const scopeId = getScopeId(cmpMeta);\n\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n        /* shadowDomEncapsulation */\n        ));\n        endRegisterStyles();\n      }\n    }\n  } // we've successfully created a lazy instance\n\n\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  const schedule = () => scheduleUpdate(hostRef, true);\n\n  if (ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the initial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(_ref2 => {\n          let [memberName, [memberFlags]] = _ref2;\n\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n\n    endConnected();\n  }\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    getHostRef(elm);\n  }\n};\n\nconst bootstrapLazy = function (lazyBundles) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            }\n          }\n        }\n\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  });\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n\n  return import(\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r };","map":{"version":3,"names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","HYDRATED_CSS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","elm","$hostElement$","flags","endAttachStyles","$tagName$","shadowRoot","getRootNode","classList","cmp","EMPTY_OBJ","isDef","isComplexType","o","nodeName","vnodeData","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","children","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$tag$","$elm$","Host","isHost","node","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","slice","isComplex","n","getAttribute","removeAttribute","setAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","textContent","data","renderVdom","renderFnResults","$vnode$","rootVnode","getElement","ref","getHostRef","emitEvent","name","ev","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","then","updateComponent","endUpdate","rc","endRender","callRender","map","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","thenFn","parsePropertyValue","propValue","propType","getValue","propName","$instanceValues$","setValue","newVal","oldVal","areBothNaN","Number","isNaN","didValueChange","proxyComponent","Cstr","$members$","members","entries","prototype","memberFlags","defineProperty","configurable","enumerable","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","hasOwnProperty","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","hostRefs","registerInstance","lazyInstance","Map","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","b","g","p"],"sources":["D:/Projects/NovaMiningverse/Nova-Miningverse/nova-miningverse-frontend/node_modules/@stacks/connect-ui/dist/esm/index-0ffade8e.js"],"sourcesContent":["const NAMESPACE = 'connect-ui';\n\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    let style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    let vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        let n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    let newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        return true;\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        // element node\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    return import(\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}