{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { utils } from '@noble/secp256k1';\nexport const randomBytes = bytesLength => Buffer.from(utils.randomBytes(bytesLength));","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAQA,OAAO,MAAMC,WAAW,GAAIC,WAAD,IAA0BH,MAAM,CAACI,IAAP,CAAYH,KAAK,CAACC,WAAN,CAAkBC,WAAlB,CAAZ,CAA9C","names":["Buffer","utils","randomBytes","bytesLength","from"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\encryption\\src\\cryptoRandom.ts"],"sourcesContent":["import { Buffer } from '@stacks/common';\nimport { utils } from '@noble/secp256k1';\n\n/**\n * Use utils.randomBytes to replace randombytes dependency\n * Generates a buffer with random bytes of given length\n * @param {bytesLength} an optional bytes length, default is 32 bytes\n * @return {Buffer} For return type compatibility converting utils.randomBytes return value to buffer\n */\nexport const randomBytes = (bytesLength?: number) => Buffer.from(utils.randomBytes(bytesLength));\n\n/** Optional function to generate cryptographically secure random bytes */\nexport type GetRandomBytes = (count: number) => Buffer;\n"]},"metadata":{},"sourceType":"module"}