{"ast":null,"code":"import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST } from './constants';\nimport { getGlobalObject } from '@stacks/common';\nexport class AppConfig {\n  constructor(scopes, appDomain, redirectPath, manifestPath, coreNode, authenticatorURL) {\n    var _a;\n\n    if (scopes === void 0) {\n      scopes = DEFAULT_SCOPE.slice();\n    }\n\n    if (appDomain === void 0) {\n      appDomain = (_a = getGlobalObject('location', {\n        returnEmptyObject: true\n      })) === null || _a === void 0 ? void 0 : _a.origin;\n    }\n\n    if (redirectPath === void 0) {\n      redirectPath = '';\n    }\n\n    if (manifestPath === void 0) {\n      manifestPath = '/manifest.json';\n    }\n\n    if (coreNode === void 0) {\n      coreNode = undefined;\n    }\n\n    if (authenticatorURL === void 0) {\n      authenticatorURL = DEFAULT_BLOCKSTACK_HOST;\n    }\n\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  redirectURI() {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  manifestURI() {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,EAAwBC,uBAAxB,QAAkE,aAAlE;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAYA,OAAM,MAAOC,SAAP,CAAgB;EAsDpBC,YACEC,MADF,EAEEC,SAFF,EAIEC,YAJF,EAKEC,YALF,EAMEC,QANF,EAOEC,gBAPF,EAOoD;;;2BANlD;MAAAL,SAAmBL,aAAa,CAACW,KAAd,EAAnB;IAAwC;;8BACxC;MAAAL,kBAAgCJ,eAAe,CAAC,UAAD,EAAa;QAAEU,iBAAiB,EAAE;MAArB,CAAb,CAA/C,MAAwF,IAAxF,IAAwFC,aAAxF,GAAwF,MAAxF,GAAwFA,GACpFC,MADJ;IACU;;iCACV;MAAAP;IAAiB;;iCACjB;MAAAC;IAA+B;;6BAC/B;MAAAC;IAAwC;;qCACxC;MAAAC;IAAkD;;IAElD,KAAKJ,SAAL,GAAiBA,SAAjB;IACA,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKE,YAAL,GAAoBA,YAApB;IACA,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;EACD;;EAODK,WAAW;IACT,OAAO,GAAG,KAAKT,SAAS,GAAG,KAAKC,YAAY,EAA5C;EACD;;EAMDS,WAAW;IACT,OAAO,GAAG,KAAKV,SAAS,GAAG,KAAKE,YAAY,EAA5C;EACD;;AAtFmB","names":["DEFAULT_SCOPE","DEFAULT_BLOCKSTACK_HOST","getGlobalObject","AppConfig","constructor","scopes","appDomain","redirectPath","manifestPath","coreNode","authenticatorURL","slice","returnEmptyObject","_a","origin","redirectURI","manifestURI"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\auth\\src\\appConfig.ts"],"sourcesContent":["import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST, AuthScope } from './constants';\nimport { getGlobalObject } from '@stacks/common';\n\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nexport class AppConfig {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   *\n   */\n  appDomain?: string;\n\n  /**\n   * An array of string representing permissions requested by the app.\n   *\n   */\n  scopes: (AuthScope | string)[];\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   *\n   */\n  redirectPath: string;\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   *\n   */\n  manifestPath: string;\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   *\n   */\n  coreNode?: string;\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   *\n   */\n  authenticatorURL?: string;\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string | undefined} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(\n    scopes: string[] = DEFAULT_SCOPE.slice(),\n    appDomain: string | undefined = getGlobalObject('location', { returnEmptyObject: true })\n      ?.origin,\n    redirectPath = '',\n    manifestPath = '/manifest.json',\n    coreNode: string | undefined = undefined,\n    authenticatorURL: string = DEFAULT_BLOCKSTACK_HOST\n  ) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n  redirectURI(): string {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n  manifestURI(): string {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}