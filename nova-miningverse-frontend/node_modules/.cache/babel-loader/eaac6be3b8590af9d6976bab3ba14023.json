{"ast":null,"code":"import { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger } from '@stacks/common';\nimport { createFetchFn } from '@stacks/network';\nconst schemaDefinition = {\n  type: 'object',\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    }\n  }\n};\nexport class Profile {\n  constructor() {\n    let profile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._profile = Object.assign({}, {\n      '@context': 'http://schema.org/'\n    }, profile);\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey) {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token) {\n    let publicKeyOrAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName, tokenFileURL) {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n\n}\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\nexport class Person extends Profile {\n  constructor() {\n    let profile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(profile);\n    this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, this._profile);\n  }\n\n  static validateSchema(profile) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token) {\n    let publicKeyOrAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations()\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n\n}\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [{\n      name: '_http._tcp',\n      priority: 10,\n      weight: 1,\n      target: `${urlScheme}://${domain}${pathname}`\n    }]\n  };\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  const validRecords = zoneFileJson.uri.filter(record => record.hasOwnProperty('target') && record.name === '_http._tcp');\n\n  if (validRecords.length < 1) {\n    return null;\n  }\n\n  const firstValidRecord = validRecords[0];\n\n  if (!firstValidRecord.hasOwnProperty('target')) {\n    return null;\n  }\n\n  let tokenFileUrl = firstValidRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {} else if (tokenFileUrl.startsWith('http')) {} else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n  let fetchFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createFetchFn();\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl = null;\n\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      try {\n        return resolve(Person.fromLegacyFormat(JSON.parse(zoneFile)).profile());\n      } catch (error) {\n        return reject(error);\n      }\n    }\n\n    if (tokenFileUrl) {\n      fetchFn(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n        const tokenRecords = responseJson;\n        const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n        resolve(profile);\n      }).catch(error => {\n        Logger.error(`resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`);\n        reject(error);\n      });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["signProfileToken","extractProfile","getPersonFromLegacyFormat","getName","getFamilyName","getGivenName","getAvatarUrl","getDescription","getVerifiedAccounts","getAddress","getBirthDate","getConnections","getOrganizations","makeZoneFile","parseZoneFile","inspector","Logger","createFetchFn","schemaDefinition","type","properties","optional","Profile","constructor","profile","_profile","Object","assign","toJSON","toToken","privateKey","validateSchema","strict","validate","fromToken","token","publicKeyOrAddress","domainName","tokenFileURL","makeProfileZoneFile","personSchemaDefinition","name","givenName","familyName","description","image","items","contentUrl","website","url","account","service","identifier","proofType","proofUrl","proofMessage","proofSignature","worksFor","knows","address","streetAddress","addressLocality","postalCode","addressCountry","birthDate","taxID","Person","fromLegacyFormat","legacyProfile","avatarUrl","verifiedAccounts","connections","organizations","verifications","origin","tokenFileUrl","includes","Error","urlScheme","split","urlParts","domain","pathname","slice","join","zoneFile","$origin","$ttl","uri","priority","weight","target","zoneFileTemplate","getTokenFileUrl","zoneFileJson","hasOwnProperty","Array","isArray","length","validRecords","filter","record","firstValidRecord","startsWith","resolveZoneFileToProfile","fetchFn","Promise","resolve","reject","e","keys","JSON","parse","error","then","response","text","responseText","responseJson","tokenRecords","catch","debug"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\profile\\src\\profile.ts"],"sourcesContent":["import { signProfileToken, extractProfile } from './profileTokens';\n\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport {\n  getName,\n  getFamilyName,\n  getGivenName,\n  getAvatarUrl,\n  getDescription,\n  getVerifiedAccounts,\n  getAddress,\n  getBirthDate,\n  getConnections,\n  getOrganizations,\n} from './profileSchemas/personUtils';\n\n// TODO: bring into this monorepo/convert to ts\n// @ts-ignore\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\n\n// Could not find a declaration file for module\n// @ts-ignore\nimport * as inspector from 'schema-inspector';\n\nimport { Logger } from '@stacks/common';\nimport { createFetchFn, FetchFn } from '@stacks/network';\n\nconst schemaDefinition: { [key: string]: any } = {\n  type: 'object',\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n  },\n};\n\n/**\n * Represents a user profile\n *\n */\nexport class Profile {\n  _profile: { [key: string]: any };\n\n  constructor(profile = {}) {\n    this._profile = Object.assign(\n      {},\n      {\n        '@context': 'http://schema.org/',\n      },\n      profile\n    );\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey: string): string {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile: any, strict = false): any {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Profile {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName: string, tokenFileURL: string): string {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n}\n\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n    '@id': { type: 'string', optional: true },\n    name: { type: 'string', optional: true },\n    givenName: { type: 'string', optional: true },\n    familyName: { type: 'string', optional: true },\n    description: { type: 'string', optional: true },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          name: { type: 'string', optional: true },\n          contentUrl: { type: 'string', optional: true },\n        },\n      },\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          url: { type: 'string', optional: true },\n        },\n      },\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          service: { type: 'string', optional: true },\n          identifier: { type: 'string', optional: true },\n          proofType: { type: 'string', optional: true },\n          proofUrl: { type: 'string', optional: true },\n          proofMessage: { type: 'string', optional: true },\n          proofSignature: { type: 'string', optional: true },\n        },\n      },\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': { type: 'string' },\n        streetAddress: { type: 'string', optional: true },\n        addressLocality: { type: 'string', optional: true },\n        postalCode: { type: 'string', optional: true },\n        addressCountry: { type: 'string', optional: true },\n      },\n    },\n    birthDate: { type: 'string', optional: true },\n    taxID: { type: 'string', optional: true },\n  },\n};\n\n/**\n * @ignore\n */\nexport class Person extends Profile {\n  constructor(profile = {}) {\n    super(profile);\n    this._profile = Object.assign(\n      {},\n      {\n        '@type': 'Person',\n      },\n      this._profile\n    );\n  }\n\n  static validateSchema(profile: any, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Person {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile: any) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations(),\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications?: any[]) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n}\n\n/**\n *\n * @param origin\n * @param tokenFileUrl\n *\n * @ignore\n */\nexport function makeProfileZoneFile(origin: string, tokenFileUrl: string): string {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [\n      {\n        name: '_http._tcp',\n        priority: 10,\n        weight: 1,\n        target: `${urlScheme}://${domain}${pathname}`,\n      },\n    ],\n  };\n\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\n\n/**\n *\n * @param zoneFileJson\n *\n * @ignore\n */\nexport function getTokenFileUrl(zoneFileJson: any): string | null {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  const validRecords = zoneFileJson.uri.filter(\n    (record: any) => record.hasOwnProperty('target') && record.name === '_http._tcp'\n  );\n\n  if (validRecords.length < 1) {\n    return null;\n  }\n\n  const firstValidRecord = validRecords[0];\n\n  if (!firstValidRecord.hasOwnProperty('target')) {\n    return null;\n  }\n  let tokenFileUrl = firstValidRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {\n    // pass\n  } else if (tokenFileUrl.startsWith('http')) {\n    // pass\n  } else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n *\n * @ignore\n */\nexport function resolveZoneFileToProfile(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<Record<string, any>> {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl: string | null = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      try {\n        return resolve(Person.fromLegacyFormat(JSON.parse(zoneFile)).profile());\n      } catch (error) {\n        return reject(error);\n      }\n    }\n\n    if (tokenFileUrl) {\n      fetchFn(tokenFileUrl)\n        .then(response => response.text())\n        .then(responseText => JSON.parse(responseText))\n        .then(responseJson => {\n          const tokenRecords = responseJson;\n          const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n          resolve(profile);\n        })\n        .catch(error => {\n          Logger.error(\n            `resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`\n          );\n          reject(error);\n        });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}