{"ast":null,"code":"import { ClarityType } from '../constants';\n\nconst stringAsciiCV = data => {\n  return {\n    type: ClarityType.StringASCII,\n    data\n  };\n};\n\nconst stringUtf8CV = data => {\n  return {\n    type: ClarityType.StringUTF8,\n    data\n  };\n};\n\nconst stringCV = (data, encoding) => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n\n    case 'utf8':\n      return stringAsciiCV(data);\n  }\n};\n\nexport { stringAsciiCV, stringUtf8CV, stringCV };","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;;AA+BA,MAAMC,aAAa,GAAIC,IAAD,IAAgC;EACpD,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACI,WAApB;IAAiCF;EAAjC,CAAP;AACD,CAFD;;AAuBA,MAAMG,YAAY,GAAIH,IAAD,IAA+B;EAClD,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACM,UAApB;IAAgCJ;EAAhC,CAAP;AACD,CAFD;;AAOA,MAAMK,QAAQ,GAAG,CAACL,IAAD,EAAeM,QAAf,KAA2E;EAC1F,QAAQA,QAAR;IACE,KAAK,OAAL;MACE,OAAOP,aAAa,CAACC,IAAD,CAApB;;IACF,KAAK,MAAL;MACE,OAAOD,aAAa,CAACC,IAAD,CAApB;EAJJ;AAMD,CAPD;;AASA,SAAsCD,aAAtC,EAAqDI,YAArD,EAAmEE,QAAnE","names":["ClarityType","stringAsciiCV","data","type","StringASCII","stringUtf8CV","StringUTF8","stringCV","encoding"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\stringCV.ts"],"sourcesContent":["import { ClarityType } from '../constants';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\n/**\n * Converts ClarityValue to stringAsciiCV\n *\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\n *\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\n *\n * @example\n * ```typescript\n *  import { stringAsciiCV } from '@stacks/transactions';\n *\n *  const stringAscii = stringAsciiCV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\n/**\n * Converts ClarityValue to stringUtf8CV\n *\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\n *\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\n *\n * @example\n * ```typescript\n *  import { stringUtf8CV } from '@stacks/transactions';\n *\n *  const stringUTF8 = stringUtf8CV('test');\n *\n *  // { type: 13, data: 'hello' }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\n/**\n *  @ignore\n */\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringAsciiCV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n"]},"metadata":{},"sourceType":"module"}