{"ast":null,"code":"import { ClarityType } from '../constants';\n\nfunction listCV(values) {\n  return {\n    type: ClarityType.List,\n    list: values\n  };\n}\n\nexport { listCV };","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,cAA5B;;AAyBA,SAASC,MAAT,CAAuDC,MAAvD,EAAkE;EAChE,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACI,IAApB;IAA0BC,IAAI,EAAEH;EAAhC,CAAP;AACD;;AAED,SAAiBD,MAAjB","names":["ClarityType","listCV","values","type","List","list"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\listCV.ts"],"sourcesContent":["import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ninterface ListCV<T extends ClarityValue = ClarityValue> {\n  type: ClarityType.List;\n  list: T[];\n}\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue>values: T[]} list of  ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} returns instance of type ListCV<T>\n *\n * @example\n * ```typescript\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 11, list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n"]},"metadata":{},"sourceType":"module"}