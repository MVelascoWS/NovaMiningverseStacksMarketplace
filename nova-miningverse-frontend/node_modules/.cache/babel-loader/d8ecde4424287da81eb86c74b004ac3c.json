{"ast":null,"code":"export function getName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n\n  return name;\n}\nexport function getGivenName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n\n  return givenName;\n}\nexport function getFamilyName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n\n  return familyName;\n}\nexport function getDescription(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n\n  if (profile.description) {\n    description = profile.description;\n  }\n\n  return description;\n}\nexport function getAvatarUrl(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl = null;\n\n  if (profile.image) {\n    profile.image.map(image => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  return avatarContentUrl;\n}\nexport function getVerifiedAccounts(profile, verifications) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts = [];\n\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map(account => {\n      let accountIsValid = false;\n      let proofUrl = null;\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n\n        if (verification.valid && verification.service === account.service && verification.identifier === account.identifier && verification.proofUrl) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  return filteredAccounts;\n}\nexport function getOrganizations(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\nexport function getConnections(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\nexport function getAddress(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\nexport function getBirthDate(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}","map":{"version":3,"mappings":"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","names":["getName","profile","name","givenName","familyName","getGivenName","nameParts","split","slice","join","getFamilyName","pop","getDescription","description","getAvatarUrl","avatarContentUrl","image","map","contentUrl","getVerifiedAccounts","verifications","filteredAccounts","hasOwnProperty","account","accountIsValid","proofUrl","verification","proof_url","valid","service","identifier","push","getOrganizations","organizations","worksFor","getConnections","connections","knows","getAddress","addressString","addressParts","address","streetAddress","addressLocality","postalCode","addressCountry","length","getBirthDate","monthNames","birthDateString","date","Date","birthDate","getMonth","getDate","getFullYear"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\profile\\src\\profileSchemas\\personUtils.ts"],"sourcesContent":["export function getName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n  return name;\n}\n\n/**\n *\n * @ignore\n */\nexport function getGivenName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n  return givenName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getFamilyName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n  return familyName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getDescription(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n  if (profile.description) {\n    description = profile.description;\n  }\n  return description;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAvatarUrl(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl: string | null = null;\n  if (profile.image) {\n    profile.image.map((image: any) => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n  return avatarContentUrl;\n}\n\n/**\n *\n * @ignore\n */\nexport function getVerifiedAccounts(profile: any, verifications?: any[]) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts: any[] = [];\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map((account: any) => {\n      let accountIsValid = false;\n      let proofUrl = null;\n\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n        if (\n          verification.valid &&\n          verification.service === account.service &&\n          verification.identifier === account.identifier &&\n          verification.proofUrl\n        ) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n  return filteredAccounts;\n}\n\n/**\n *\n * @ignore\n */\nexport function getOrganizations(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations: any[] = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\n\n/**\n *\n * @ignore\n */\nexport function getConnections(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAddress(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\n\n/**\n *\n * @ignore\n */\nexport function getBirthDate(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}\n"]},"metadata":{},"sourceType":"module"}