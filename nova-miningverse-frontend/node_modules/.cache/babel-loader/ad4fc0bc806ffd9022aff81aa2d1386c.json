{"ast":null,"code":"import { createFetchFn } from '@stacks/network';\nimport { parseZoneFile } from 'zone-file';\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nexport function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback) {\n  let fetchFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : createFetchFn();\n  let zoneFileJson = null;\n\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchFn(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n      const tokenRecords = responseJson;\n      const token = tokenRecords[0].token;\n      const profile = extractProfile(token, publicKeyOrAddress);\n      callback(profile);\n    }).catch(error => {\n      console.warn(error);\n    });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,aAAT,QAAuC,iBAAvC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,YAAxC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAUA,OAAM,SAAUC,uBAAV,CACJC,QADI,EAEJC,kBAFI,EAGJC,QAHI,EAI8B;EAAA,IAAlCC,OAAkC,uEAAfT,aAAa,EAAE;EAElC,IAAIU,YAAY,GAAG,IAAnB;;EACA,IAAI;IACFA,YAAY,GAAGT,aAAa,CAACK,QAAD,CAA5B;;IACA,IAAI,CAACI,YAAY,CAACC,cAAb,CAA4B,SAA5B,CAAL,EAA6C;MAC3CD,YAAY,GAAG,IAAf;MACA,MAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;IACD;EACF,CAND,CAME,OAAOC,CAAP,EAAU;IACVC,OAAO,CAACC,KAAR,CAAcF,CAAd;EACD;;EAED,IAAIG,YAAY,GAAG,IAAnB;;EACA,IAAIN,YAAY,IAAIO,MAAM,CAACC,IAAP,CAAYR,YAAZ,EAA0BS,MAA1B,GAAmC,CAAvD,EAA0D;IACxDH,YAAY,GAAGd,eAAe,CAACQ,YAAD,CAA9B;EACD,CAFD,MAEO;IACL,IAAIU,OAAO,GAAG,IAAd;;IACA,IAAI;MACFA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWhB,QAAX,CAAV;MACA,MAAMiB,MAAM,GAAGpB,MAAM,CAACqB,gBAAP,CAAwBJ,OAAxB,CAAf;MACAA,OAAO,GAAGG,MAAM,CAACH,OAAP,EAAV;IACD,CAJD,CAIE,OAAOL,KAAP,EAAc;MACdD,OAAO,CAACW,IAAR,CAAaV,KAAb;IACD;;IACDP,QAAQ,CAACY,OAAD,CAAR;IACA;EACD;;EAED,IAAIJ,YAAJ,EAAkB;IAChBP,OAAO,CAACO,YAAD,CAAP,CACGU,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,YAAY,IAAIR,IAAI,CAACC,KAAL,CAAWO,YAAX,CAFxB,EAGGH,IAHH,CAGQI,YAAY,IAAG;MACnB,MAAMC,YAAY,GAAGD,YAArB;MACA,MAAME,KAAK,GAAGD,YAAY,CAAC,CAAD,CAAZ,CAAgBC,KAA9B;MACA,MAAMZ,OAAO,GAAGhB,cAAc,CAAC4B,KAAD,EAAQzB,kBAAR,CAA9B;MAEAC,QAAQ,CAACY,OAAD,CAAR;IACD,CATH,EAUGa,KAVH,CAUSlB,KAAK,IAAG;MACbD,OAAO,CAACW,IAAR,CAAaV,KAAb;IACD,CAZH;EAaD,CAdD,MAcO;IACLD,OAAO,CAACW,IAAR,CAAa,0BAAb;IACAjB,QAAQ,CAAC,EAAD,CAAR;EACD;AACF","names":["createFetchFn","parseZoneFile","getTokenFileUrl","Person","extractProfile","resolveZoneFileToPerson","zoneFile","publicKeyOrAddress","callback","fetchFn","zoneFileJson","hasOwnProperty","Error","e","console","error","tokenFileUrl","Object","keys","length","profile","JSON","parse","person","fromLegacyFormat","warn","then","response","text","responseText","responseJson","tokenRecords","token","catch"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\profile\\src\\profileSchemas\\personZoneFiles.ts"],"sourcesContent":["// @ts-ignore: Could not find a declaration file for module\nimport { createFetchFn, FetchFn } from '@stacks/network';\nimport { parseZoneFile } from 'zone-file';\n\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n * @param callback\n *\n * @ignore\n */\nexport function resolveZoneFileToPerson(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  callback: (profile: any) => void,\n  fetchFn: FetchFn = createFetchFn()\n) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchFn(tokenFileUrl)\n      .then(response => response.text())\n      .then(responseText => JSON.parse(responseText))\n      .then(responseJson => {\n        const tokenRecords = responseJson;\n        const token = tokenRecords[0].token;\n        const profile = extractProfile(token, publicKeyOrAddress);\n\n        callback(profile);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}