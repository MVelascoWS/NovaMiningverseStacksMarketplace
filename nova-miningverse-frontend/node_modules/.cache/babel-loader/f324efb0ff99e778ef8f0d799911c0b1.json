{"ast":null,"code":"export const ERROR_CODES = {\n  MISSING_PARAMETER: 'missing_parameter',\n  REMOTE_SERVICE_ERROR: 'remote_service_error',\n  INVALID_STATE: 'invalid_state',\n  NO_SESSION_DATA: 'no_session_data',\n  DOES_NOT_EXIST: 'does_not_exist',\n  FAILED_DECRYPTION_ERROR: 'failed_decryption_error',\n  INVALID_DID_ERROR: 'invalid_did_error',\n  NOT_ENOUGH_FUNDS_ERROR: 'not_enough_error',\n  INVALID_AMOUNT_ERROR: 'invalid_amount_error',\n  LOGIN_FAILED_ERROR: 'login_failed',\n  SIGNATURE_VERIFICATION_ERROR: 'signature_verification_failure',\n  CONFLICT_ERROR: 'conflict_error',\n  NOT_ENOUGH_PROOF_ERROR: 'not_enough_proof_error',\n  BAD_PATH_ERROR: 'bad_path_error',\n  VALIDATION_ERROR: 'validation_error',\n  PAYLOAD_TOO_LARGE_ERROR: 'payload_too_large_error',\n  PRECONDITION_FAILED_ERROR: 'precondition_failed_error',\n  UNKNOWN: 'unknown'\n};\nObject.freeze(ERROR_CODES);\nexport class BlockstackError extends Error {\n  constructor(error) {\n    super();\n    let message = error.message;\n    let bugDetails = `Error Code: ${error.code}`;\n    let stack = this.stack;\n\n    if (!stack) {\n      try {\n        throw new Error();\n      } catch (e) {\n        stack = e.stack;\n      }\n    } else {\n      bugDetails += `Stack Trace:\\n${stack}`;\n    }\n\n    message += `\\nIf you believe this exception is caused by a bug in stacks.js,\n      please file a bug report: https://github.com/blockstack/stacks.js/issues\\n\\n${bugDetails}`;\n    this.message = message;\n    this.code = error.code;\n    this.parameter = error.parameter ? error.parameter : undefined;\n  }\n\n  toString() {\n    return `${super.toString()}\n    code: ${this.code} param: ${this.parameter ? this.parameter : 'n/a'}`;\n  }\n\n}\nexport class InvalidParameterError extends BlockstackError {\n  constructor(parameter) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    super({\n      code: ERROR_CODES.MISSING_PARAMETER,\n      message,\n      parameter\n    });\n    this.name = 'MissingParametersError';\n  }\n\n}\nexport class MissingParameterError extends BlockstackError {\n  constructor(parameter) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    super({\n      code: ERROR_CODES.MISSING_PARAMETER,\n      message,\n      parameter\n    });\n    this.name = 'MissingParametersError';\n  }\n\n}\nexport class RemoteServiceError extends BlockstackError {\n  constructor(response) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    super({\n      code: ERROR_CODES.REMOTE_SERVICE_ERROR,\n      message\n    });\n    this.response = response;\n  }\n\n}\nexport class InvalidDIDError extends BlockstackError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    super({\n      code: ERROR_CODES.INVALID_DID_ERROR,\n      message\n    });\n    this.name = 'InvalidDIDError';\n  }\n\n}\nexport class NotEnoughFundsError extends BlockstackError {\n  constructor(leftToFund) {\n    const message = `Not enough UTXOs to fund. Left to fund: ${leftToFund}`;\n    super({\n      code: ERROR_CODES.NOT_ENOUGH_FUNDS_ERROR,\n      message\n    });\n    this.leftToFund = leftToFund;\n    this.name = 'NotEnoughFundsError';\n    this.message = message;\n  }\n\n}\nexport class InvalidAmountError extends BlockstackError {\n  constructor(fees, specifiedAmount) {\n    const message = `Not enough coin to fund fees transaction fees. Fees would be ${fees},` + ` specified spend is  ${specifiedAmount}`;\n    super({\n      code: ERROR_CODES.INVALID_AMOUNT_ERROR,\n      message\n    });\n    this.specifiedAmount = specifiedAmount;\n    this.fees = fees;\n    this.name = 'InvalidAmountError';\n    this.message = message;\n  }\n\n}\nexport class LoginFailedError extends BlockstackError {\n  constructor(reason) {\n    const message = `Failed to login: ${reason}`;\n    super({\n      code: ERROR_CODES.LOGIN_FAILED_ERROR,\n      message\n    });\n    this.message = message;\n    this.name = 'LoginFailedError';\n  }\n\n}\nexport class SignatureVerificationError extends BlockstackError {\n  constructor(reason) {\n    const message = `Failed to verify signature: ${reason}`;\n    super({\n      code: ERROR_CODES.SIGNATURE_VERIFICATION_ERROR,\n      message\n    });\n    this.message = message;\n    this.name = 'SignatureVerificationError';\n  }\n\n}\nexport class FailedDecryptionError extends BlockstackError {\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Unable to decrypt cipher object.';\n    super({\n      code: ERROR_CODES.FAILED_DECRYPTION_ERROR,\n      message\n    });\n    this.message = message;\n    this.name = 'FailedDecryptionError';\n  }\n\n}\nexport class InvalidStateError extends BlockstackError {\n  constructor(message) {\n    super({\n      code: ERROR_CODES.INVALID_STATE,\n      message\n    });\n    this.message = message;\n    this.name = 'InvalidStateError';\n  }\n\n}\nexport class NoSessionDataError extends BlockstackError {\n  constructor(message) {\n    super({\n      code: ERROR_CODES.INVALID_STATE,\n      message\n    });\n    this.message = message;\n    this.name = 'NoSessionDataError';\n  }\n\n}\nexport class GaiaHubError extends BlockstackError {\n  constructor(error, response) {\n    super(error);\n\n    if (response) {\n      this.hubError = {\n        statusCode: response.status,\n        statusText: response.statusText\n      };\n\n      if (typeof response.body === 'string') {\n        this.hubError.message = response.body;\n      } else if (typeof response.body === 'object') {\n        Object.assign(this.hubError, response.body);\n      }\n    }\n  }\n\n}\nexport class DoesNotExist extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.DOES_NOT_EXIST\n    }, response);\n    this.name = 'DoesNotExist';\n  }\n\n}\nexport class ConflictError extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.CONFLICT_ERROR\n    }, response);\n    this.name = 'ConflictError';\n  }\n\n}\nexport class NotEnoughProofError extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.NOT_ENOUGH_PROOF_ERROR\n    }, response);\n    this.name = 'NotEnoughProofError';\n  }\n\n}\nexport class BadPathError extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.BAD_PATH_ERROR\n    }, response);\n    this.name = 'BadPathError';\n  }\n\n}\nexport class ValidationError extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.VALIDATION_ERROR\n    }, response);\n    this.name = 'ValidationError';\n  }\n\n}\nexport class PayloadTooLargeError extends GaiaHubError {\n  constructor(message, response, maxUploadByteSize) {\n    super({\n      message,\n      code: ERROR_CODES.PAYLOAD_TOO_LARGE_ERROR\n    }, response);\n    this.name = 'PayloadTooLargeError';\n    this.maxUploadByteSize = maxUploadByteSize;\n  }\n\n}\nexport class PreconditionFailedError extends GaiaHubError {\n  constructor(message, response) {\n    super({\n      message,\n      code: ERROR_CODES.PRECONDITION_FAILED_ERROR\n    }, response);\n    this.name = 'PreconditionFailedError';\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ERROR_CODES","MISSING_PARAMETER","REMOTE_SERVICE_ERROR","INVALID_STATE","NO_SESSION_DATA","DOES_NOT_EXIST","FAILED_DECRYPTION_ERROR","INVALID_DID_ERROR","NOT_ENOUGH_FUNDS_ERROR","INVALID_AMOUNT_ERROR","LOGIN_FAILED_ERROR","SIGNATURE_VERIFICATION_ERROR","CONFLICT_ERROR","NOT_ENOUGH_PROOF_ERROR","BAD_PATH_ERROR","VALIDATION_ERROR","PAYLOAD_TOO_LARGE_ERROR","PRECONDITION_FAILED_ERROR","UNKNOWN","Object","freeze","BlockstackError","Error","constructor","error","message","bugDetails","code","stack","e","parameter","undefined","toString","InvalidParameterError","name","MissingParameterError","RemoteServiceError","response","InvalidDIDError","NotEnoughFundsError","leftToFund","InvalidAmountError","fees","specifiedAmount","LoginFailedError","reason","SignatureVerificationError","FailedDecryptionError","InvalidStateError","NoSessionDataError","GaiaHubError","hubError","statusCode","status","statusText","body","assign","DoesNotExist","ConflictError","NotEnoughProofError","BadPathError","ValidationError","PayloadTooLargeError","maxUploadByteSize","PreconditionFailedError"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\common\\src\\errors.ts"],"sourcesContent":["/**\n * @ignore\n */\nexport const ERROR_CODES = {\n  MISSING_PARAMETER: 'missing_parameter',\n  REMOTE_SERVICE_ERROR: 'remote_service_error',\n  INVALID_STATE: 'invalid_state',\n  NO_SESSION_DATA: 'no_session_data',\n  DOES_NOT_EXIST: 'does_not_exist',\n  FAILED_DECRYPTION_ERROR: 'failed_decryption_error',\n  INVALID_DID_ERROR: 'invalid_did_error',\n  NOT_ENOUGH_FUNDS_ERROR: 'not_enough_error',\n  INVALID_AMOUNT_ERROR: 'invalid_amount_error',\n  LOGIN_FAILED_ERROR: 'login_failed',\n  SIGNATURE_VERIFICATION_ERROR: 'signature_verification_failure',\n  CONFLICT_ERROR: 'conflict_error',\n  NOT_ENOUGH_PROOF_ERROR: 'not_enough_proof_error',\n  BAD_PATH_ERROR: 'bad_path_error',\n  VALIDATION_ERROR: 'validation_error',\n  PAYLOAD_TOO_LARGE_ERROR: 'payload_too_large_error',\n  PRECONDITION_FAILED_ERROR: 'precondition_failed_error',\n  UNKNOWN: 'unknown',\n};\n\nObject.freeze(ERROR_CODES);\n\n/**\n * @ignore\n */\ntype ErrorData = {\n  code: string;\n  parameter?: string;\n  message: string;\n};\n\n/**\n * @ignore\n */\nexport class BlockstackError extends Error {\n  message: string;\n\n  code: string;\n\n  parameter?: string;\n\n  constructor(error: ErrorData) {\n    super();\n    let message = error.message;\n    let bugDetails = `Error Code: ${error.code}`;\n    let stack = this.stack;\n    if (!stack) {\n      try {\n        throw new Error();\n      } catch (e: any) {\n        stack = e.stack;\n      }\n    } else {\n      bugDetails += `Stack Trace:\\n${stack}`;\n    }\n    message += `\\nIf you believe this exception is caused by a bug in stacks.js,\n      please file a bug report: https://github.com/blockstack/stacks.js/issues\\n\\n${bugDetails}`;\n    this.message = message;\n    this.code = error.code;\n    this.parameter = error.parameter ? error.parameter : undefined;\n  }\n\n  toString() {\n    return `${super.toString()}\n    code: ${this.code} param: ${this.parameter ? this.parameter : 'n/a'}`;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class MissingParameterError extends BlockstackError {\n  constructor(parameter: string, message: string = '') {\n    super({ code: ERROR_CODES.MISSING_PARAMETER, message, parameter });\n    this.name = 'MissingParametersError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class RemoteServiceError extends BlockstackError {\n  response: Response;\n\n  constructor(response: Response, message: string = '') {\n    super({ code: ERROR_CODES.REMOTE_SERVICE_ERROR, message });\n    this.response = response;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidDIDError extends BlockstackError {\n  constructor(message: string = '') {\n    super({ code: ERROR_CODES.INVALID_DID_ERROR, message });\n    this.name = 'InvalidDIDError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughFundsError extends BlockstackError {\n  leftToFund: number;\n\n  constructor(leftToFund: number) {\n    const message = `Not enough UTXOs to fund. Left to fund: ${leftToFund}`;\n    super({ code: ERROR_CODES.NOT_ENOUGH_FUNDS_ERROR, message });\n    this.leftToFund = leftToFund;\n    this.name = 'NotEnoughFundsError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidAmountError extends BlockstackError {\n  fees: number;\n\n  specifiedAmount: number;\n\n  constructor(fees: number, specifiedAmount: number) {\n    const message =\n      `Not enough coin to fund fees transaction fees. Fees would be ${fees},` +\n      ` specified spend is  ${specifiedAmount}`;\n    super({ code: ERROR_CODES.INVALID_AMOUNT_ERROR, message });\n    this.specifiedAmount = specifiedAmount;\n    this.fees = fees;\n    this.name = 'InvalidAmountError';\n    this.message = message;\n  }\n}\n\n/**\n * @ignore\n */\nexport class LoginFailedError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to login: ${reason}`;\n    super({ code: ERROR_CODES.LOGIN_FAILED_ERROR, message });\n    this.message = message;\n    this.name = 'LoginFailedError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class SignatureVerificationError extends BlockstackError {\n  constructor(reason: string) {\n    const message = `Failed to verify signature: ${reason}`;\n    super({ code: ERROR_CODES.SIGNATURE_VERIFICATION_ERROR, message });\n    this.message = message;\n    this.name = 'SignatureVerificationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class FailedDecryptionError extends BlockstackError {\n  constructor(message: string = 'Unable to decrypt cipher object.') {\n    super({ code: ERROR_CODES.FAILED_DECRYPTION_ERROR, message });\n    this.message = message;\n    this.name = 'FailedDecryptionError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class InvalidStateError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'InvalidStateError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NoSessionDataError extends BlockstackError {\n  constructor(message: string) {\n    super({ code: ERROR_CODES.INVALID_STATE, message });\n    this.message = message;\n    this.name = 'NoSessionDataError';\n  }\n}\n\n/**\n * @ignore\n */\nexport interface GaiaHubErrorResponse {\n  status: number;\n  statusText: string;\n  body?: string | any;\n}\n\nexport interface HubErrorDetails {\n  message?: string;\n  statusCode: number;\n  statusText: string;\n  [prop: string]: any;\n}\n\n/**\n * @ignore\n */\nexport class GaiaHubError extends BlockstackError {\n  hubError?: HubErrorDetails;\n\n  constructor(error: ErrorData, response: GaiaHubErrorResponse) {\n    super(error);\n    if (response) {\n      this.hubError = {\n        statusCode: response.status,\n        statusText: response.statusText,\n      };\n      if (typeof response.body === 'string') {\n        this.hubError.message = response.body;\n      } else if (typeof response.body === 'object') {\n        Object.assign(this.hubError, response.body);\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nexport class DoesNotExist extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.DOES_NOT_EXIST }, response);\n    this.name = 'DoesNotExist';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ConflictError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.CONFLICT_ERROR }, response);\n    this.name = 'ConflictError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class NotEnoughProofError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.NOT_ENOUGH_PROOF_ERROR }, response);\n    this.name = 'NotEnoughProofError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class BadPathError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.BAD_PATH_ERROR }, response);\n    this.name = 'BadPathError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class ValidationError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.VALIDATION_ERROR }, response);\n    this.name = 'ValidationError';\n  }\n}\n\n/**\n * @ignore\n */\nexport class PayloadTooLargeError extends GaiaHubError {\n  /** Can be `null` when an oversized payload is detected client-side. */\n  hubError?: HubErrorDetails;\n\n  maxUploadByteSize: number;\n\n  constructor(message: string, response: GaiaHubErrorResponse | null, maxUploadByteSize: number) {\n    super({ message, code: ERROR_CODES.PAYLOAD_TOO_LARGE_ERROR }, response!);\n    this.name = 'PayloadTooLargeError';\n    this.maxUploadByteSize = maxUploadByteSize;\n  }\n}\n\n/**\n * @ignore\n */\nexport class PreconditionFailedError extends GaiaHubError {\n  constructor(message: string, response: GaiaHubErrorResponse) {\n    super({ message, code: ERROR_CODES.PRECONDITION_FAILED_ERROR }, response);\n    this.name = 'PreconditionFailedError';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}