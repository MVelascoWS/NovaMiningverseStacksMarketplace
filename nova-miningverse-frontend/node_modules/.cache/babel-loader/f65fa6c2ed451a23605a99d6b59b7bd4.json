{"ast":null,"code":"import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n  if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n\n  const recoveryIdHex = signature.slice(0, 2);\n  const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n  const s = signature.slice(2 + COORDINATE_BYTES * 2);\n  return {\n    recoveryId: hexToInt(recoveryIdHex),\n    r,\n    s\n  };\n}\nexport function signatureVrsToRsv(signature) {\n  return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n  return signature.slice(-2) + signature.slice(0, -2);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AAGA,OAAM,SAAUC,4BAAV,CAAuCC,SAAvC,EAAwD;EAC5D,IAAIA,SAAS,CAACC,MAAV,GAAmBH,gBAAgB,GAAG,CAAnB,GAAuB,CAAvB,GAA2B,CAAlD,EAAqD;IACnD,MAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;EACD;;EACD,MAAMC,aAAa,GAAGH,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAtB;EACA,MAAMC,CAAC,GAAGL,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,IAAIN,gBAAgB,GAAG,CAA1C,CAAV;EACA,MAAMQ,CAAC,GAAGN,SAAS,CAACI,KAAV,CAAgB,IAAIN,gBAAgB,GAAG,CAAvC,CAAV;EACA,OAAO;IACLS,UAAU,EAAEV,QAAQ,CAACM,aAAD,CADf;IAELE,CAFK;IAGLC;EAHK,CAAP;AAKD;AAGD,OAAM,SAAUE,iBAAV,CAA4BR,SAA5B,EAA6C;EACjD,OAAOA,SAAS,CAACI,KAAV,CAAgB,CAAhB,IAAqBJ,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAA5B;AACD;AAGD,OAAM,SAAUK,iBAAV,CAA4BT,SAA5B,EAA6C;EACjD,OAAOA,SAAS,CAACI,KAAV,CAAgB,CAAC,CAAjB,IAAsBJ,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAA7B;AACD","names":["hexToInt","COORDINATE_BYTES","parseRecoverableSignatureVrs","signature","length","Error","recoveryIdHex","slice","r","s","recoveryId","signatureVrsToRsv","signatureRsvToVrs"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\common\\src\\signatures.ts"],"sourcesContent":["import { hexToInt } from './utils';\n\nconst COORDINATE_BYTES = 32;\n\n/** @ignore */\nexport function parseRecoverableSignatureVrs(signature: string) {\n  if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryIdHex = signature.slice(0, 2);\n  const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n  const s = signature.slice(2 + COORDINATE_BYTES * 2);\n  return {\n    recoveryId: hexToInt(recoveryIdHex),\n    r,\n    s,\n  };\n}\n\n/** @ignore */\nexport function signatureVrsToRsv(signature: string) {\n  return signature.slice(2) + signature.slice(0, 2);\n}\n\n/** @ignore */\nexport function signatureRsvToVrs(signature: string) {\n  return signature.slice(-2) + signature.slice(0, -2);\n}\n"]},"metadata":{},"sourceType":"module"}