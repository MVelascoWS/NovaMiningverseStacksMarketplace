{"ast":null,"code":"import { ClarityType } from '../constants';\n\nfunction noneCV() {\n  return {\n    type: ClarityType.OptionalNone\n  };\n}\n\nfunction someCV(value) {\n  return {\n    type: ClarityType.OptionalSome,\n    value\n  };\n}\n\nfunction optionalCVOf(value) {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n}\n\nexport { noneCV, someCV, optionalCVOf };","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,cAA5B;;AA4BA,SAASC,MAAT,GAAe;EACb,OAAO;IAAEC,IAAI,EAAEF,WAAW,CAACG;EAApB,CAAP;AACD;;AAoBD,SAASC,MAAT,CAAuDC,KAAvD,EAA+D;EAC7D,OAAO;IAAEH,IAAI,EAAEF,WAAW,CAACM,YAApB;IAAkCD;EAAlC,CAAP;AACD;;AAED,SAASE,YAAT,CAA6DF,KAA7D,EAAsE;EACpE,IAAIA,KAAJ,EAAW;IACT,OAAOD,MAAM,CAACC,KAAD,CAAb;EACD,CAFD,MAEO;IACL,OAAOJ,MAAM,EAAb;EACD;AACF;;AAED,SAAqCA,MAArC,EAA6CG,MAA7C,EAAqDG,YAArD","names":["ClarityType","noneCV","type","OptionalNone","someCV","value","OptionalSome","optionalCVOf"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\optionalCV.ts"],"sourcesContent":["import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\ntype OptionalCV<T extends ClarityValue = ClarityValue> = NoneCV | SomeCV<T>;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV<T extends ClarityValue = ClarityValue> {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: T;\n}\n\n/**\n * Create a null clarity type\n **\n * @returns {NoneCV} returns instance of type NoneCV\n *\n * @example\n * ```\n *  import { noneCV } from '@stacks/transactions';\n *\n *  const value = noneCV();\n *  // { type: 9 }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction noneCV(): NoneCV {\n  return { type: ClarityType.OptionalNone };\n}\n\n/**\n * Converts any ClarityValue in to OptionalCV clarity type\n *\n * @param {ClarityValue} value to be converted to OptionalCV clarity type\n *\n * @returns {OptionalCV} returns instance of type OptionalCV\n *\n * @example\n * ```\n *  import { someCV, trueCV } from '@stacks/transactions';\n *\n *  const value = someCV(trueCV());\n *  // { type: 10, value: { type: 3 } }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nfunction someCV<T extends ClarityValue = ClarityValue>(value: T): OptionalCV<T> {\n  return { type: ClarityType.OptionalSome, value };\n}\n\nfunction optionalCVOf<T extends ClarityValue = ClarityValue>(value?: T): OptionalCV<T> {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n}\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n"]},"metadata":{},"sourceType":"module"}