{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { PostConditionType, StacksMessageType } from './constants';\nimport { parseAssetInfoString, parsePrincipalString } from './postcondition-types';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false)\n  };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo\n  };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName\n  };\n}","map":{"version":3,"mappings":"AAAA,SAAsBA,WAAtB,QAAyC,gBAAzC;AACA,SACEC,iBADF,EAIEC,iBAJF,QAKO,aALP;AAOA,SAGEC,oBAHF,EAIEC,oBAJF,QAQO,uBARP;AAYA,OAAM,SAAUC,sBAAV,CACJC,SADI,EAEJC,aAFI,EAGJC,MAHI,EAGe;EAEnB,IAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAD,CAAhC;EACD;;EAED,OAAO;IACLG,IAAI,EAAEP,iBAAiB,CAACQ,aADnB;IAELC,aAAa,EAAEV,iBAAiB,CAACW,GAF5B;IAGLN,SAHK;IAILC,aAJK;IAKLC,MAAM,EAAER,WAAW,CAACQ,MAAD,EAAS,KAAT;EALd,CAAP;AAOD;AAED,OAAM,SAAUK,2BAAV,CACJP,SADI,EAEJC,aAFI,EAGJC,MAHI,EAIJM,SAJI,EAIyB;EAE7B,IAAI,OAAOR,SAAP,KAAqB,QAAzB,EAAmC;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAD,CAAhC;EACD;;EACD,IAAI,OAAOQ,SAAP,KAAqB,QAAzB,EAAmC;IACjCA,SAAS,GAAGX,oBAAoB,CAACW,SAAD,CAAhC;EACD;;EAED,OAAO;IACLL,IAAI,EAAEP,iBAAiB,CAACQ,aADnB;IAELC,aAAa,EAAEV,iBAAiB,CAACc,QAF5B;IAGLT,SAHK;IAILC,aAJK;IAKLC,MAAM,EAAER,WAAW,CAACQ,MAAD,EAAS,KAAT,CALd;IAMLM;EANK,CAAP;AAQD;AAED,OAAM,SAAUE,8BAAV,CACJV,SADI,EAEJC,aAFI,EAGJO,SAHI,EAIJG,SAJI,EAImB;EAEvB,IAAI,OAAOX,SAAP,KAAqB,QAAzB,EAAmC;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAD,CAAhC;EACD;;EACD,IAAI,OAAOQ,SAAP,KAAqB,QAAzB,EAAmC;IACjCA,SAAS,GAAGX,oBAAoB,CAACW,SAAD,CAAhC;EACD;;EAED,OAAO;IACLL,IAAI,EAAEP,iBAAiB,CAACQ,aADnB;IAELC,aAAa,EAAEV,iBAAiB,CAACiB,WAF5B;IAGLZ,SAHK;IAILC,aAJK;IAKLO,SALK;IAMLG;EANK,CAAP;AAQD","names":["intToBigInt","PostConditionType","StacksMessageType","parseAssetInfoString","parsePrincipalString","createSTXPostCondition","principal","conditionCode","amount","type","PostCondition","conditionType","STX","createFungiblePostCondition","assetInfo","Fungible","createNonFungiblePostCondition","assetName","NonFungible"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\transactions\\src\\postcondition.ts"],"sourcesContent":["import { IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport {\n  AssetInfo,\n  PostConditionPrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n} from './postcondition-types';\n\nimport { ClarityValue } from './clarity';\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n  };\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo,\n  };\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}