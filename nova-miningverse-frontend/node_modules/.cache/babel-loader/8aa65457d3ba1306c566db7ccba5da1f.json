{"ast":null,"code":"import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn } from './fetch';\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport const StacksNetworks = ['mainnet', 'testnet'];\nexport class StacksNetwork {\n  constructor(networkConfig) {\n    var _a;\n\n    this.version = TransactionVersion.Mainnet;\n    this.chainId = ChainID.Mainnet;\n    this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n    this.broadcastEndpoint = '/v2/transactions';\n    this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n    this.transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n    this.accountEndpoint = '/v2/accounts';\n    this.contractAbiEndpoint = '/v2/contracts/interface';\n    this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n    this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n\n    this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n\n    this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n\n    this.getTransactionFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n\n    this.getAccountApiUrl = address => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n\n    this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n\n    this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n\n    this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n\n    this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n\n    this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n\n    this.getRewardsUrl = (address, options) => {\n      let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n\n      if (options) {\n        url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n      }\n\n      return url;\n    };\n\n    this.getRewardsTotalUrl = address => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n\n    this.getRewardHoldersUrl = (address, options) => {\n      let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n\n      if (options) {\n        url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n      }\n\n      return url;\n    };\n\n    this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n\n    this.coreApiUrl = networkConfig.url;\n    this.fetchFn = (_a = networkConfig.fetchFn) !== null && _a !== void 0 ? _a : createFetchFn();\n  }\n\n  getNameInfo(fullyQualifiedName) {\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return this.fetchFn(nameLookupURL).then(resp => {\n      if (resp.status === 404) {\n        throw new Error('Name not found');\n      } else if (resp.status !== 200) {\n        throw new Error(`Bad response status: ${resp.status}`);\n      } else {\n        return resp.json();\n      }\n    }).then(nameInfo => {\n      if (nameInfo.address) {\n        return Object.assign({}, nameInfo, {\n          address: nameInfo.address\n        });\n      } else {\n        return nameInfo;\n      }\n    });\n  }\n\n}\n\nStacksNetwork.fromName = networkName => {\n  switch (networkName) {\n    case 'mainnet':\n      return new StacksMainnet();\n\n    case 'testnet':\n      return new StacksTestnet();\n\n    default:\n      throw new Error(`Invalid network name provided. Must be one of the following: ${StacksNetworks.join(', ')}`);\n  }\n};\n\nStacksNetwork.fromNameOrNetwork = network => {\n  if (typeof network !== 'string' && 'version' in network) {\n    return network;\n  }\n\n  return StacksNetwork.fromName(network);\n};\n\nexport class StacksMainnet extends StacksNetwork {\n  constructor(opts) {\n    var _a;\n\n    super({\n      url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_MAINNET_DEFAULT,\n      fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn\n    });\n    this.version = TransactionVersion.Mainnet;\n    this.chainId = ChainID.Mainnet;\n  }\n\n}\nexport class StacksTestnet extends StacksNetwork {\n  constructor(opts) {\n    var _a;\n\n    super({\n      url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_TESTNET_DEFAULT,\n      fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn\n    });\n    this.version = TransactionVersion.Testnet;\n    this.chainId = ChainID.Testnet;\n  }\n\n}\nexport class StacksMocknet extends StacksNetwork {\n  constructor(opts) {\n    var _a;\n\n    super({\n      url: (_a = opts === null || opts === void 0 ? void 0 : opts.url) !== null && _a !== void 0 ? _a : HIRO_MOCKNET_DEFAULT,\n      fetchFn: opts === null || opts === void 0 ? void 0 : opts.fetchFn\n    });\n    this.version = TransactionVersion.Testnet;\n    this.chainId = ChainID.Testnet;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TransactionVersion","ChainID","createFetchFn","HIRO_MAINNET_DEFAULT","HIRO_TESTNET_DEFAULT","HIRO_MOCKNET_DEFAULT","StacksNetworks","StacksNetwork","constructor","networkConfig","Mainnet","version","coreApiUrl","broadcastEndpoint","transferFeeEstimateEndpoint","transactionFeeEstimateEndpoint","address","accountEndpoint","contract","contractAbiEndpoint","contractAddress","contractName","functionName","readOnlyFunctionCallEndpoint","encodeURIComponent","options","url","limit","offset","fetchFn","_a","getNameInfo","fullyQualifiedName","nameLookupURL","bnsLookupUrl","then","resp","status","Error","json","nameInfo","Object","assign","networkName","StacksMainnet","StacksTestnet","join","network","fromName","opts","Testnet","StacksMocknet"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\network\\src\\network.ts"],"sourcesContent":["import { TransactionVersion, ChainID } from '@stacks/common';\nimport { createFetchFn, FetchFn } from './fetch';\n\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\n\nexport interface NetworkConfig {\n  url: string;\n  fetchFn?: FetchFn;\n}\n\nexport const StacksNetworks = ['mainnet', 'testnet'] as const;\nexport type StacksNetworkName = typeof StacksNetworks[number];\n\n/**\n * @related {@link StacksMainnet}, {@link StacksTestnet}, {@link StacksMocknet}\n */\nexport class StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n  bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n  broadcastEndpoint = '/v2/transactions';\n  transferFeeEstimateEndpoint = '/v2/fees/transfer';\n  transactionFeeEstimateEndpoint = '/v2/fees/transaction';\n  accountEndpoint = '/v2/accounts';\n  contractAbiEndpoint = '/v2/contracts/interface';\n  readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n  readonly coreApiUrl: string;\n\n  fetchFn: FetchFn;\n\n  constructor(networkConfig: NetworkConfig) {\n    this.coreApiUrl = networkConfig.url;\n    this.fetchFn = networkConfig.fetchFn ?? createFetchFn();\n  }\n\n  static fromName = (networkName: StacksNetworkName): StacksNetwork => {\n    switch (networkName) {\n      case 'mainnet':\n        return new StacksMainnet();\n      case 'testnet':\n        return new StacksTestnet();\n      default:\n        throw new Error(\n          `Invalid network name provided. Must be one of the following: ${StacksNetworks.join(\n            ', '\n          )}`\n        );\n    }\n  };\n\n  static fromNameOrNetwork = (network: StacksNetworkName | StacksNetwork) => {\n    if (typeof network !== 'string' && 'version' in network) {\n      return network;\n    }\n\n    return StacksNetwork.fromName(network);\n  };\n\n  isMainnet = () => this.version === TransactionVersion.Mainnet;\n  getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n  getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n  getTransactionFeeEstimateApiUrl = () =>\n    `${this.coreApiUrl}${this.transactionFeeEstimateEndpoint}`;\n  getAccountApiUrl = (address: string) =>\n    `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n  getAbiApiUrl = (address: string, contract: string) =>\n    `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n  getReadOnlyFunctionCallApiUrl = (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) =>\n    `${this.coreApiUrl}${\n      this.readOnlyFunctionCallEndpoint\n    }/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n  getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n  getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n  getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n  getRewardsUrl = (address: string, options?: any) => {\n    let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n    if (options) {\n      url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n    }\n    return url;\n  };\n  getRewardsTotalUrl = (address: string) =>\n    `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n  getRewardHoldersUrl = (address: string, options?: any) => {\n    let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n    if (options) {\n      url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n    }\n    return url;\n  };\n  getStackerInfoUrl = (contractAddress: string, contractName: string) =>\n    `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n  getNameInfo(fullyQualifiedName: string) {\n    /*\n      TODO: Update to v2 API URL for name lookups\n    */\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return this.fetchFn(nameLookupURL)\n      .then(resp => {\n        if (resp.status === 404) {\n          throw new Error('Name not found');\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // the returned address _should_ be in the correct network ---\n        //  blockstackd gets into trouble because it tries to coerce back to mainnet\n        //  and the regtest transaction generation libraries want to use testnet addresses\n        if (nameInfo.address) {\n          return Object.assign({}, nameInfo, { address: nameInfo.address });\n        } else {\n          return nameInfo;\n        }\n      });\n  }\n}\n\n/**\n * A {@link StacksNetwork} with default values for the Stacks mainnet.\n * Pass a `url` option to override the default Hiro hosted Stacks node API.\n * Pass a `fetchFn` option to customize the default networking functions.\n * @example\n * ```\n * const network = new StacksMainnet();\n * const network = new StacksMainnet({ url: \"https://stacks-node-api.mainnet.stacks.co\" });\n * const network = new StacksMainnet({ fetch: createFetchFn() });\n * ```\n * @related {@link createFetchFn}, {@link createApiKeyMiddleware}\n */\nexport class StacksMainnet extends StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_MAINNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n\n/**\n * Same as {@link StacksMainnet} but defaults to values for the Stacks testnet.\n */\nexport class StacksTestnet extends StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_TESTNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n\nexport class StacksMocknet extends StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n\n  constructor(opts?: Partial<NetworkConfig>) {\n    super({\n      url: opts?.url ?? HIRO_MOCKNET_DEFAULT,\n      fetchFn: opts?.fetchFn,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}