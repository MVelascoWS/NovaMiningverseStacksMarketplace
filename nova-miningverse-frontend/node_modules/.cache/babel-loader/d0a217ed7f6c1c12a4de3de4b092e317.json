{"ast":null,"code":"import { resolveZoneFileToProfile } from '@stacks/profile';\nimport { StacksMainnet, StacksNetwork } from '@stacks/network';\nexport function lookupProfile(lookupOptions) {\n  if (!lookupOptions.username) {\n    return Promise.reject(new Error('No username provided'));\n  }\n\n  const defaultOptions = {\n    network: new StacksMainnet()\n  };\n  const options = Object.assign(defaultOptions, lookupOptions);\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  let lookupPromise;\n\n  if (options.zoneFileLookupURL) {\n    const url = `${options.zoneFileLookupURL.replace(/\\/$/, '')}/${options.username}`;\n    lookupPromise = network.fetchFn(url).then(response => response.json());\n  } else {\n    lookupPromise = network.getNameInfo(options.username);\n  }\n\n  return lookupPromise.then(responseJSON => {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address, network.fetchFn);\n    } else {\n      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,wBAAT,QAAyC,iBAAzC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAAgE,iBAAhE;AAiBA,OAAM,SAAUC,aAAV,CAAwBC,aAAxB,EAA2D;EAC/D,IAAI,CAACA,aAAa,CAACC,QAAnB,EAA6B;IAC3B,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;EACD;;EAED,MAAMC,cAAc,GAAG;IACrBC,OAAO,EAAE,IAAIT,aAAJ;EADY,CAAvB;EAGA,MAAMU,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcJ,cAAd,EAA8BL,aAA9B,CAAhB;EAEA,MAAMM,OAAO,GAAGR,aAAa,CAACY,iBAAd,CAAgCH,OAAO,CAACD,OAAxC,CAAhB;EACA,IAAIK,aAAJ;;EACA,IAAIJ,OAAO,CAACK,iBAAZ,EAA+B;IAC7B,MAAMC,GAAG,GAAG,GAAGN,OAAO,CAACK,iBAAR,CAA0BE,OAA1B,CAAkC,KAAlC,EAAyC,EAAzC,CAA4C,IAAIP,OAAO,CAACN,QAAQ,EAA/E;IACAU,aAAa,GAAGL,OAAO,CAACS,OAAR,CAAgBF,GAAhB,EAAqBG,IAArB,CAA0BC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAtC,CAAhB;EACD,CAHD,MAGO;IACLP,aAAa,GAAGL,OAAO,CAACa,WAAR,CAAoBZ,OAAO,CAACN,QAA5B,CAAhB;EACD;;EACD,OAAOU,aAAa,CAACK,IAAd,CAAoBI,YAAD,IAAsB;IAC9C,IAAIA,YAAY,CAACC,cAAb,CAA4B,UAA5B,KAA2CD,YAAY,CAACC,cAAb,CAA4B,SAA5B,CAA/C,EAAuF;MACrF,OAAOzB,wBAAwB,CAACwB,YAAY,CAACE,QAAd,EAAwBF,YAAY,CAACG,OAArC,EAA8CjB,OAAO,CAACS,OAAtD,CAA/B;IACD,CAFD,MAEO;MACL,MAAM,IAAIX,KAAJ,CACJ,gEAAgE,sBAD5D,CAAN;IAGD;EACF,CARM,CAAP;AASD","names":["resolveZoneFileToProfile","StacksMainnet","StacksNetwork","lookupProfile","lookupOptions","username","Promise","reject","Error","defaultOptions","network","options","Object","assign","fromNameOrNetwork","lookupPromise","zoneFileLookupURL","url","replace","fetchFn","then","response","json","getNameInfo","responseJSON","hasOwnProperty","zonefile","address"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\auth\\src\\profile.ts"],"sourcesContent":["import { resolveZoneFileToProfile } from '@stacks/profile';\nimport { StacksMainnet, StacksNetwork, StacksNetworkName } from '@stacks/network';\n\nexport interface ProfileLookupOptions {\n  username: string;\n  zoneFileLookupURL?: string;\n  network?: StacksNetworkName | StacksNetwork;\n}\n\n/**\n * Look up a user profile by blockstack ID\n *\n * @param {string} username - The Blockstack ID of the profile to look up\n * @param {string} [zoneFileLookupURL=null] - The URL\n * to use for zonefile lookup. If falsey, lookupProfile will use the\n * blockstack.js [[getNameInfo]] function.\n * @returns {Promise} that resolves to a profile object\n */\nexport function lookupProfile(lookupOptions: ProfileLookupOptions): Promise<Record<string, any>> {\n  if (!lookupOptions.username) {\n    return Promise.reject(new Error('No username provided'));\n  }\n\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n  const options = Object.assign(defaultOptions, lookupOptions);\n\n  const network = StacksNetwork.fromNameOrNetwork(options.network);\n  let lookupPromise;\n  if (options.zoneFileLookupURL) {\n    const url = `${options.zoneFileLookupURL.replace(/\\/$/, '')}/${options.username}`;\n    lookupPromise = network.fetchFn(url).then(response => response.json());\n  } else {\n    lookupPromise = network.getNameInfo(options.username);\n  }\n  return lookupPromise.then((responseJSON: any) => {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address, network.fetchFn);\n    } else {\n      throw new Error(\n        'Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field'\n      );\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}