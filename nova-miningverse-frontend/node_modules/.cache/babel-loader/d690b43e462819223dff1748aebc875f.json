{"ast":null,"code":"function formatAccount(serviceName, data) {\n  let proofUrl;\n\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl\n  };\n}\n\nexport function getPersonFromLegacyFormat(profile) {\n  const profileData = {\n    '@type': 'Person'\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted\n      };\n    }\n\n    const images = [];\n\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url\n      });\n    }\n\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url\n      });\n    }\n\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [{\n        '@type': 'WebSite',\n        url: profile.website\n      }];\n    }\n\n    const accounts = [];\n\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address\n      });\n    }\n\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain\n          });\n        }\n      }\n    }\n\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}","map":{"version":3,"mappings":"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","names":["formatAccount","serviceName","data","proofUrl","proof","url","service","identifier","username","proofType","getPersonFromLegacyFormat","profile","profileData","name","formatted","bio","description","location","address","addressLocality","images","avatar","push","contentUrl","cover","length","image","website","accounts","bitcoin","role","twitter","facebook","github","auth","publicKeychain","pgp","fingerprint","account"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\profile\\src\\profileSchemas\\personLegacy.ts"],"sourcesContent":["/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\nfunction formatAccount(serviceName: string, data: any) {\n  let proofUrl;\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl,\n  };\n}\n\n/**\n *\n * @param profile\n *\n * @ignore\n */\nexport function getPersonFromLegacyFormat(profile: any) {\n  const profileData: {\n    ['@type']: string;\n    account?: any[];\n    name?: string;\n    description?: string;\n    address?: {\n      ['@type']: string;\n      addressLocality: string;\n    };\n    image?: any[];\n    website?: {\n      ['@type']: string;\n      url: string;\n    }[];\n  } = {\n    '@type': 'Person',\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted,\n      };\n    }\n\n    const images = [];\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url,\n      });\n    }\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url,\n      });\n    }\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [\n        {\n          '@type': 'WebSite',\n          url: profile.website,\n        },\n      ];\n    }\n\n    const accounts = [];\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address,\n      });\n    }\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain,\n          });\n        }\n      }\n    }\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url,\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}\n"]},"metadata":{},"sourceType":"module"}