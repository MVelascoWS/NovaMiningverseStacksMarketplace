{"ast":null,"code":"import { InvalidDIDError } from '@stacks/common';\nexport function makeDIDFromAddress(address) {\n  return `did:btc-addr:${address}`;\n}\nexport function makeDIDFromPublicKey(publicKey) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\nexport function getDIDType(decentralizedID) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\nexport function getAddressFromDID(decentralizedID) {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,gBAAhC;AAKA,OAAM,SAAUC,kBAAV,CAA6BC,OAA7B,EAA4C;EAChD,OAAO,gBAAgBA,OAAO,EAA9B;AACD;AAKD,OAAM,SAAUC,oBAAV,CAA+BC,SAA/B,EAAgD;EACpD,OAAO,iBAAiBA,SAAS,EAAjC;AACD;AAKD,OAAM,SAAUC,UAAV,CAAqBC,eAArB,EAA4C;EAChD,MAAMC,QAAQ,GAAGD,eAAe,CAACE,KAAhB,CAAsB,GAAtB,CAAjB;;EAEA,IAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;IACzB,MAAM,IAAIT,eAAJ,CAAoB,qCAApB,CAAN;EACD;;EAED,IAAIO,QAAQ,CAAC,CAAD,CAAR,CAAYG,WAAZ,OAA8B,KAAlC,EAAyC;IACvC,MAAM,IAAIV,eAAJ,CAAoB,yCAApB,CAAN;EACD;;EAED,OAAOO,QAAQ,CAAC,CAAD,CAAR,CAAYG,WAAZ,EAAP;AACD;AAKD,OAAM,SAAUC,iBAAV,CAA4BL,eAA5B,EAAoD;EACxD,IAAIA,eAAJ,EAAqB;IACnB,MAAMM,OAAO,GAAGP,UAAU,CAACC,eAAD,CAA1B;;IACA,IAAIM,OAAO,KAAK,UAAhB,EAA4B;MAC1B,OAAON,eAAe,CAACE,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAP;IACD,CAFD,MAEO;MACL,OAAOK,SAAP;IACD;EACF;;EACD,OAAOA,SAAP;AACD","names":["InvalidDIDError","makeDIDFromAddress","address","makeDIDFromPublicKey","publicKey","getDIDType","decentralizedID","didParts","split","length","toLowerCase","getAddressFromDID","didType","undefined"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect-react\\node_modules\\@stacks\\auth\\src\\dids.ts"],"sourcesContent":["import { InvalidDIDError } from '@stacks/common';\n\n/**\n * @ignore\n */\nexport function makeDIDFromAddress(address: string) {\n  return `did:btc-addr:${address}`;\n}\n\n/**\n * @ignore\n */\nexport function makeDIDFromPublicKey(publicKey: string) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\n\n/**\n * @ignore\n */\nexport function getDIDType(decentralizedID: string) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\n/**\n * @ignore\n */\nexport function getAddressFromDID(decentralizedID?: string): string | undefined {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}