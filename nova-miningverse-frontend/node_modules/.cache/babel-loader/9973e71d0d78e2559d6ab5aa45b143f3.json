{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff');\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff');\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728');\n\nconst intCV = value => {\n  const bigInt = intToBigInt(value, true);\n\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128.toString()}`);\n  }\n\n  return {\n    type: ClarityType.Int,\n    value: bigInt\n  };\n};\n\nconst uintCV = value => {\n  const bigInt = intToBigInt(value, false);\n\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`);\n  }\n\n  return {\n    type: ClarityType.UInt,\n    value: bigInt\n  };\n};\n\nexport { intCV, uintCV };","map":{"version":3,"mappings":"AAAA,SAAsBA,WAAtB,QAAyC,gBAAzC;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,oCAAD,CAAvB;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAAC,CAAD,CAAvB;AACA,MAAME,QAAQ,GAAGF,MAAM,CAAC,oCAAD,CAAvB;AAEA,MAAMG,QAAQ,GAAGH,MAAM,CAAC,0CAAD,CAAvB;;AAyBA,MAAMI,KAAK,GAAIC,KAAD,IAA8B;EAC1C,MAAMC,MAAM,GAAGT,WAAW,CAACQ,KAAD,EAAQ,IAAR,CAA1B;;EACA,IAAIC,MAAM,GAAGJ,QAAb,EAAuB;IACrB,MAAM,IAAIK,UAAJ,CACJ,4DAA4DL,QAAQ,CAACM,QAAT,EAAmB,EAD3E,CAAN;EAGD,CAJD,MAIO,IAAIF,MAAM,GAAGH,QAAb,EAAuB;IAC5B,MAAM,IAAII,UAAJ,CACJ,yDAAyDJ,QAAQ,CAACK,QAAT,EAAmB,EADxE,CAAN;EAGD;;EACD,OAAO;IAAEC,IAAI,EAAEX,WAAW,CAACY,GAApB;IAAyBL,KAAK,EAAEC;EAAhC,CAAP;AACD,CAZD;;AAqCA,MAAMK,MAAM,GAAIN,KAAD,IAA+B;EAC5C,MAAMC,MAAM,GAAGT,WAAW,CAACQ,KAAD,EAAQ,KAAR,CAA1B;;EACA,IAAIC,MAAM,GAAGL,QAAb,EAAuB;IACrB,MAAM,IAAIM,UAAJ,CAAe,+DAAf,CAAN;EACD,CAFD,MAEO,IAAID,MAAM,GAAGP,QAAb,EAAuB;IAC5B,MAAM,IAAIQ,UAAJ,CACJ,0DAA0DR,QAAQ,CAACS,QAAT,EAAmB,EADzE,CAAN;EAGD;;EACD,OAAO;IAAEC,IAAI,EAAEX,WAAW,CAACc,IAApB;IAA0BP,KAAK,EAAEC;EAAjC,CAAP;AACD,CAVD;;AAYA,SAAwBF,KAAxB,EAA+BO,MAA/B","names":["intToBigInt","ClarityType","MAX_U128","BigInt","MIN_U128","MAX_I128","MIN_I128","intCV","value","bigInt","RangeError","toString","type","Int","uintCV","UInt"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\intCV.ts"],"sourcesContent":["import { IntegerType, intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\n\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\n// no signed (negative) hex support in bigint constructor\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to IntCV clarity type\n *\n * @returns {IntCV} returns instance of type IntCV\n *\n * @example\n * ```\n *  import { intCV } from '@stacks/transactions';\n *\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 0, value: 100n }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst intCV = (value: IntegerType): IntCV => {\n  const bigInt = intToBigInt(value, true);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(\n      `Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`\n    );\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(\n      `Cannot construct clarity integer form value less than ${MIN_I128.toString()}`\n    );\n  }\n  return { type: ClarityType.Int, value: bigInt };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: bigint;\n}\n\n/**\n * Converts IntegerType in to IntCV clarity type\n *\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\n *\n * @returns {UIntCV} returns instance of type UIntCV\n *\n * @example\n * ```\n *  import { uintCV } from '@stacks/transactions';\n *\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\n *  // { type: 1, value: 100n }\n * ```\n *\n * @visit\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts clarity test cases for more examples}\n */\nconst uintCV = (value: IntegerType): UIntCV => {\n  const bigInt = intToBigInt(value, false);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(\n      `Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`\n    );\n  }\n  return { type: ClarityType.UInt, value: bigInt };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n"]},"metadata":{},"sourceType":"module"}