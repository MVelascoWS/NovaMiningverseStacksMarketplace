{"ast":null,"code":"var ChainID;\n\n(function (ChainID) {\n  ChainID[ChainID[\"Testnet\"] = 2147483648] = \"Testnet\";\n  ChainID[ChainID[\"Mainnet\"] = 1] = \"Mainnet\";\n})(ChainID || (ChainID = {}));\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst CLARITY_INT_BYTE_SIZE = 16;\nconst COINBASE_BUFFER_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\nvar StacksMessageType;\n\n(function (StacksMessageType) {\n  StacksMessageType[StacksMessageType[\"Address\"] = 0] = \"Address\";\n  StacksMessageType[StacksMessageType[\"Principal\"] = 1] = \"Principal\";\n  StacksMessageType[StacksMessageType[\"LengthPrefixedString\"] = 2] = \"LengthPrefixedString\";\n  StacksMessageType[StacksMessageType[\"MemoString\"] = 3] = \"MemoString\";\n  StacksMessageType[StacksMessageType[\"AssetInfo\"] = 4] = \"AssetInfo\";\n  StacksMessageType[StacksMessageType[\"PostCondition\"] = 5] = \"PostCondition\";\n  StacksMessageType[StacksMessageType[\"PublicKey\"] = 6] = \"PublicKey\";\n  StacksMessageType[StacksMessageType[\"LengthPrefixedList\"] = 7] = \"LengthPrefixedList\";\n  StacksMessageType[StacksMessageType[\"Payload\"] = 8] = \"Payload\";\n  StacksMessageType[StacksMessageType[\"MessageSignature\"] = 9] = \"MessageSignature\";\n  StacksMessageType[StacksMessageType[\"StructuredDataSignature\"] = 10] = \"StructuredDataSignature\";\n  StacksMessageType[StacksMessageType[\"TransactionAuthField\"] = 11] = \"TransactionAuthField\";\n})(StacksMessageType || (StacksMessageType = {}));\n\nvar PayloadType;\n\n(function (PayloadType) {\n  PayloadType[PayloadType[\"TokenTransfer\"] = 0] = \"TokenTransfer\";\n  PayloadType[PayloadType[\"SmartContract\"] = 1] = \"SmartContract\";\n  PayloadType[PayloadType[\"ContractCall\"] = 2] = \"ContractCall\";\n  PayloadType[PayloadType[\"PoisonMicroblock\"] = 3] = \"PoisonMicroblock\";\n  PayloadType[PayloadType[\"Coinbase\"] = 4] = \"Coinbase\";\n})(PayloadType || (PayloadType = {}));\n\nvar AnchorMode;\n\n(function (AnchorMode) {\n  AnchorMode[AnchorMode[\"OnChainOnly\"] = 1] = \"OnChainOnly\";\n  AnchorMode[AnchorMode[\"OffChainOnly\"] = 2] = \"OffChainOnly\";\n  AnchorMode[AnchorMode[\"Any\"] = 3] = \"Any\";\n})(AnchorMode || (AnchorMode = {}));\n\nvar TransactionVersion;\n\n(function (TransactionVersion) {\n  TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n  TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\nvar PostConditionMode;\n\n(function (PostConditionMode) {\n  PostConditionMode[PostConditionMode[\"Allow\"] = 1] = \"Allow\";\n  PostConditionMode[PostConditionMode[\"Deny\"] = 2] = \"Deny\";\n})(PostConditionMode || (PostConditionMode = {}));\n\nvar PostConditionType;\n\n(function (PostConditionType) {\n  PostConditionType[PostConditionType[\"STX\"] = 0] = \"STX\";\n  PostConditionType[PostConditionType[\"Fungible\"] = 1] = \"Fungible\";\n  PostConditionType[PostConditionType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(PostConditionType || (PostConditionType = {}));\n\nvar AuthType;\n\n(function (AuthType) {\n  AuthType[AuthType[\"Standard\"] = 4] = \"Standard\";\n  AuthType[AuthType[\"Sponsored\"] = 5] = \"Sponsored\";\n})(AuthType || (AuthType = {}));\n\nvar AddressHashMode;\n\n(function (AddressHashMode) {\n  AddressHashMode[AddressHashMode[\"SerializeP2PKH\"] = 0] = \"SerializeP2PKH\";\n  AddressHashMode[AddressHashMode[\"SerializeP2SH\"] = 1] = \"SerializeP2SH\";\n  AddressHashMode[AddressHashMode[\"SerializeP2WPKH\"] = 2] = \"SerializeP2WPKH\";\n  AddressHashMode[AddressHashMode[\"SerializeP2WSH\"] = 3] = \"SerializeP2WSH\";\n})(AddressHashMode || (AddressHashMode = {}));\n\nvar AddressVersion;\n\n(function (AddressVersion) {\n  AddressVersion[AddressVersion[\"MainnetSingleSig\"] = 22] = \"MainnetSingleSig\";\n  AddressVersion[AddressVersion[\"MainnetMultiSig\"] = 20] = \"MainnetMultiSig\";\n  AddressVersion[AddressVersion[\"TestnetSingleSig\"] = 26] = \"TestnetSingleSig\";\n  AddressVersion[AddressVersion[\"TestnetMultiSig\"] = 21] = \"TestnetMultiSig\";\n})(AddressVersion || (AddressVersion = {}));\n\nvar PubKeyEncoding;\n\n(function (PubKeyEncoding) {\n  PubKeyEncoding[PubKeyEncoding[\"Compressed\"] = 0] = \"Compressed\";\n  PubKeyEncoding[PubKeyEncoding[\"Uncompressed\"] = 1] = \"Uncompressed\";\n})(PubKeyEncoding || (PubKeyEncoding = {}));\n\nvar FungibleConditionCode;\n\n(function (FungibleConditionCode) {\n  FungibleConditionCode[FungibleConditionCode[\"Equal\"] = 1] = \"Equal\";\n  FungibleConditionCode[FungibleConditionCode[\"Greater\"] = 2] = \"Greater\";\n  FungibleConditionCode[FungibleConditionCode[\"GreaterEqual\"] = 3] = \"GreaterEqual\";\n  FungibleConditionCode[FungibleConditionCode[\"Less\"] = 4] = \"Less\";\n  FungibleConditionCode[FungibleConditionCode[\"LessEqual\"] = 5] = \"LessEqual\";\n})(FungibleConditionCode || (FungibleConditionCode = {}));\n\nvar NonFungibleConditionCode;\n\n(function (NonFungibleConditionCode) {\n  NonFungibleConditionCode[NonFungibleConditionCode[\"DoesNotOwn\"] = 16] = \"DoesNotOwn\";\n  NonFungibleConditionCode[NonFungibleConditionCode[\"Owns\"] = 17] = \"Owns\";\n})(NonFungibleConditionCode || (NonFungibleConditionCode = {}));\n\nvar PostConditionPrincipalID;\n\n(function (PostConditionPrincipalID) {\n  PostConditionPrincipalID[PostConditionPrincipalID[\"Origin\"] = 1] = \"Origin\";\n  PostConditionPrincipalID[PostConditionPrincipalID[\"Standard\"] = 2] = \"Standard\";\n  PostConditionPrincipalID[PostConditionPrincipalID[\"Contract\"] = 3] = \"Contract\";\n})(PostConditionPrincipalID || (PostConditionPrincipalID = {}));\n\nvar AssetType;\n\n(function (AssetType) {\n  AssetType[AssetType[\"STX\"] = 0] = \"STX\";\n  AssetType[AssetType[\"Fungible\"] = 1] = \"Fungible\";\n  AssetType[AssetType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(AssetType || (AssetType = {}));\n\nvar TxRejectedReason;\n\n(function (TxRejectedReason) {\n  TxRejectedReason[\"Serialization\"] = \"Serialization\";\n  TxRejectedReason[\"Deserialization\"] = \"Deserialization\";\n  TxRejectedReason[\"SignatureValidation\"] = \"SignatureValidation\";\n  TxRejectedReason[\"FeeTooLow\"] = \"FeeTooLow\";\n  TxRejectedReason[\"BadNonce\"] = \"BadNonce\";\n  TxRejectedReason[\"NotEnoughFunds\"] = \"NotEnoughFunds\";\n  TxRejectedReason[\"NoSuchContract\"] = \"NoSuchContract\";\n  TxRejectedReason[\"NoSuchPublicFunction\"] = \"NoSuchPublicFunction\";\n  TxRejectedReason[\"BadFunctionArgument\"] = \"BadFunctionArgument\";\n  TxRejectedReason[\"ContractAlreadyExists\"] = \"ContractAlreadyExists\";\n  TxRejectedReason[\"PoisonMicroblocksDoNotConflict\"] = \"PoisonMicroblocksDoNotConflict\";\n  TxRejectedReason[\"PoisonMicroblockHasUnknownPubKeyHash\"] = \"PoisonMicroblockHasUnknownPubKeyHash\";\n  TxRejectedReason[\"PoisonMicroblockIsInvalid\"] = \"PoisonMicroblockIsInvalid\";\n  TxRejectedReason[\"BadAddressVersionByte\"] = \"BadAddressVersionByte\";\n  TxRejectedReason[\"NoCoinbaseViaMempool\"] = \"NoCoinbaseViaMempool\";\n  TxRejectedReason[\"ServerFailureNoSuchChainTip\"] = \"ServerFailureNoSuchChainTip\";\n  TxRejectedReason[\"ServerFailureDatabase\"] = \"ServerFailureDatabase\";\n  TxRejectedReason[\"ServerFailureOther\"] = \"ServerFailureOther\";\n})(TxRejectedReason || (TxRejectedReason = {}));\n\nexport { MAX_STRING_LENGTH_BYTES, CLARITY_INT_SIZE, CLARITY_INT_BYTE_SIZE, COINBASE_BUFFER_LENGTH_BYTES, DEFAULT_CHAIN_ID, DEFAULT_TRANSACTION_VERSION, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, COMPRESSED_PUBKEY_LENGTH_BYTES, UNCOMPRESSED_PUBKEY_LENGTH_BYTES, MEMO_MAX_LENGTH_BYTES, DEFAULT_CORE_NODE_API_URL, ChainID, StacksMessageType, PayloadType, AnchorMode, TransactionVersion, PostConditionMode, PostConditionType, PostConditionPrincipalID, AuthType, AddressHashMode, AddressVersion, PubKeyEncoding, FungibleConditionCode, NonFungibleConditionCode, AssetType, TxRejectedReason };","map":{"version":3,"mappings":"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","names":["ChainID","DEFAULT_CHAIN_ID","Mainnet","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","COINBASE_BUFFER_LENGTH_BYTES","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","DEFAULT_CORE_NODE_API_URL","StacksMessageType","PayloadType","AnchorMode","TransactionVersion","DEFAULT_TRANSACTION_VERSION","PostConditionMode","PostConditionType","AuthType","AddressHashMode","AddressVersion","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalID","AssetType","TxRejectedReason"],"sources":["D:\\Projects\\NovaMiningverse\\Nova-Miningverse\\nova-miningverse-frontend\\node_modules\\@stacks\\connect\\node_modules\\@stacks\\transactions\\src\\constants.ts"],"sourcesContent":["/**\n * Unsigned 32-bit integer\n */\nenum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst CLARITY_INT_BYTE_SIZE = 16;\nconst COINBASE_BUFFER_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\n\nenum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  StructuredDataSignature,\n  TransactionAuthField,\n}\n\nenum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n}\n\n/**\n * How a transaction should get appended to the Stacks blockchain.\n *\n * In the Stacks blockchain, there are two kinds of blocks: anchored\n * blocks and streaming microblocks. A transactions AnchorMode specifies\n * which kind of block it should be included in.\n *\n * For more information about the kinds of Stacks blocks and the various\n * AnchorModes, check out {@link https://github.com/stacksgov/sips/blob/main/sips/sip-001/sip-001-burn-election.md SIP 001} and\n * {@link https://github.com/stacksgov/sips/blob/main/sips/sip-005/sip-005-blocks-and-transactions.md SIP 005}\n */\nenum AnchorMode {\n  /** The transaction MUST be included in an anchored block */\n  OnChainOnly = 0x01,\n  /** The transaction MUST be included in a microblock */\n  OffChainOnly = 0x02,\n  /** The leader can choose where to include the transaction (anchored block or microblock)*/\n  Any = 0x03,\n}\n\nenum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\nenum PostConditionMode {\n  Allow = 0x01,\n  Deny = 0x02,\n}\n\nenum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum AuthType {\n  Standard = 0x04,\n  Sponsored = 0x05,\n}\n\nenum AddressHashMode {\n  // serialization modes for public keys to addresses.\n  // We support four different modes due to legacy compatibility with Stacks v1 addresses:\n  /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** MultiSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** SingleSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\ntype SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\ntype MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\nenum AddressVersion {\n  MainnetSingleSig = 22,\n  MainnetMultiSig = 20,\n  TestnetSingleSig = 26,\n  TestnetMultiSig = 21,\n}\n\nenum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\nenum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\nenum NonFungibleConditionCode {\n  DoesNotOwn = 0x10,\n  Owns = 0x11,\n}\n\nenum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\nenum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n\nexport {\n  MAX_STRING_LENGTH_BYTES,\n  CLARITY_INT_SIZE,\n  CLARITY_INT_BYTE_SIZE,\n  COINBASE_BUFFER_LENGTH_BYTES,\n  DEFAULT_CHAIN_ID,\n  DEFAULT_TRANSACTION_VERSION,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  DEFAULT_CORE_NODE_API_URL,\n  ChainID,\n  StacksMessageType,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  PostConditionMode,\n  PostConditionType,\n  PostConditionPrincipalID,\n  AuthType,\n  AddressHashMode,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  AddressVersion,\n  PubKeyEncoding,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  AssetType,\n  TxRejectedReason,\n};\n"]},"metadata":{},"sourceType":"module"}